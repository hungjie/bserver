// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServicePacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServicePacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ReplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostTopicRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostTopicRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostTopicResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostTopicResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublicServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublicServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublicServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublicServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupLBSNearRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupLBSNearRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupLBSNearResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupLBSNearResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupCityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupCityRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupCityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupCityResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PythonCoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PythonCoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PythonCoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PythonCoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServicePacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServicePacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServicePacket_2eproto() {
  protobuf_AddDesc_ServicePacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServicePacket.proto");
  GOOGLE_CHECK(file != NULL);
  ReplyRequest_descriptor_ = file->message_type(0);
  static const int ReplyRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, topic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, authorization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, data_),
  };
  ReplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyRequest_descriptor_,
      ReplyRequest::default_instance_,
      ReplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyRequest));
  ReplyResponse_descriptor_ = file->message_type(1);
  static const int ReplyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyResponse, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyResponse, data_),
  };
  ReplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyResponse_descriptor_,
      ReplyResponse::default_instance_,
      ReplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyResponse));
  PostTopicRequest_descriptor_ = file->message_type(2);
  static const int PostTopicRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, forum_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, authorization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, data_),
  };
  PostTopicRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostTopicRequest_descriptor_,
      PostTopicRequest::default_instance_,
      PostTopicRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostTopicRequest));
  PostTopicResponse_descriptor_ = file->message_type(3);
  static const int PostTopicResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicResponse, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicResponse, data_),
  };
  PostTopicResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostTopicResponse_descriptor_,
      PostTopicResponse::default_instance_,
      PostTopicResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostTopicResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostTopicResponse));
  PublicServiceRequest_descriptor_ = file->message_type(4);
  static const int PublicServiceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceRequest, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceRequest, data_),
  };
  PublicServiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublicServiceRequest_descriptor_,
      PublicServiceRequest::default_instance_,
      PublicServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublicServiceRequest));
  PublicServiceResponse_descriptor_ = file->message_type(5);
  static const int PublicServiceResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceResponse, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceResponse, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceResponse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceResponse, time_),
  };
  PublicServiceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublicServiceResponse_descriptor_,
      PublicServiceResponse::default_instance_,
      PublicServiceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicServiceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublicServiceResponse));
  GroupLBSNearRequest_descriptor_ = file->message_type(6);
  static const int GroupLBSNearRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearRequest, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearRequest, long__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearRequest, max_distance_),
  };
  GroupLBSNearRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupLBSNearRequest_descriptor_,
      GroupLBSNearRequest::default_instance_,
      GroupLBSNearRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupLBSNearRequest));
  GroupLBSNearResponse_descriptor_ = file->message_type(7);
  static const int GroupLBSNearResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearResponse, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearResponse, data_),
  };
  GroupLBSNearResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupLBSNearResponse_descriptor_,
      GroupLBSNearResponse::default_instance_,
      GroupLBSNearResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLBSNearResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupLBSNearResponse));
  GroupCityRequest_descriptor_ = file->message_type(8);
  static const int GroupCityRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityRequest, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityRequest, limit_),
  };
  GroupCityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupCityRequest_descriptor_,
      GroupCityRequest::default_instance_,
      GroupCityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupCityRequest));
  GroupCityResponse_descriptor_ = file->message_type(9);
  static const int GroupCityResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityResponse, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityResponse, data_),
  };
  GroupCityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupCityResponse_descriptor_,
      GroupCityResponse::default_instance_,
      GroupCityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupCityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupCityResponse));
  PythonCoreRequest_descriptor_ = file->message_type(10);
  static const int PythonCoreRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreRequest, json_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreRequest, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreRequest, function_name_),
  };
  PythonCoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PythonCoreRequest_descriptor_,
      PythonCoreRequest::default_instance_,
      PythonCoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PythonCoreRequest));
  PythonCoreResponse_descriptor_ = file->message_type(11);
  static const int PythonCoreResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreResponse, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreResponse, json_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreResponse, status_),
  };
  PythonCoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PythonCoreResponse_descriptor_,
      PythonCoreResponse::default_instance_,
      PythonCoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonCoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PythonCoreResponse));
  ServicePacket_descriptor_ = file->message_type(12);
  static const int ServicePacket_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, reply_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, reply_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, post_topic_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, post_topic_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, public_service_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, public_service_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, group_lbs_near_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, group_lbs_near_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, group_city_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, group_city_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, python_core_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, python_core_response_),
  };
  ServicePacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServicePacket_descriptor_,
      ServicePacket::default_instance_,
      ServicePacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicePacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServicePacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServicePacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyRequest_descriptor_, &ReplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyResponse_descriptor_, &ReplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostTopicRequest_descriptor_, &PostTopicRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostTopicResponse_descriptor_, &PostTopicResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublicServiceRequest_descriptor_, &PublicServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublicServiceResponse_descriptor_, &PublicServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupLBSNearRequest_descriptor_, &GroupLBSNearRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupLBSNearResponse_descriptor_, &GroupLBSNearResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupCityRequest_descriptor_, &GroupCityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupCityResponse_descriptor_, &GroupCityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PythonCoreRequest_descriptor_, &PythonCoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PythonCoreResponse_descriptor_, &PythonCoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServicePacket_descriptor_, &ServicePacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServicePacket_2eproto() {
  delete ReplyRequest::default_instance_;
  delete ReplyRequest_reflection_;
  delete ReplyResponse::default_instance_;
  delete ReplyResponse_reflection_;
  delete PostTopicRequest::default_instance_;
  delete PostTopicRequest_reflection_;
  delete PostTopicResponse::default_instance_;
  delete PostTopicResponse_reflection_;
  delete PublicServiceRequest::default_instance_;
  delete PublicServiceRequest_reflection_;
  delete PublicServiceResponse::default_instance_;
  delete PublicServiceResponse_reflection_;
  delete GroupLBSNearRequest::default_instance_;
  delete GroupLBSNearRequest_reflection_;
  delete GroupLBSNearResponse::default_instance_;
  delete GroupLBSNearResponse_reflection_;
  delete GroupCityRequest::default_instance_;
  delete GroupCityRequest_reflection_;
  delete GroupCityResponse::default_instance_;
  delete GroupCityResponse_reflection_;
  delete PythonCoreRequest::default_instance_;
  delete PythonCoreRequest_reflection_;
  delete PythonCoreResponse::default_instance_;
  delete PythonCoreResponse_reflection_;
  delete ServicePacket::default_instance_;
  delete ServicePacket_reflection_;
}

void protobuf_AddDesc_ServicePacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ServicePacket.proto\"\256\001\n\014ReplyRequest\022\013"
    "\n\003cid\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006expiry\030\003 \001("
    "\003\022\020\n\010topic_id\030\004 \001(\t\022\014\n\004sign\030\005 \001(\t\022\t\n\001v\030\006"
    " \001(\t\022\020\n\010platform\030\007 \001(\t\022\021\n\tdevice_id\030\010 \001("
    "\t\022\025\n\rauthorization\030\t \001(\t\022\014\n\004data\030\n \001(\014\"8"
    "\n\rReplyResponse\022\013\n\003cid\030\001 \001(\t\022\014\n\004type\030\002 \001"
    "(\t\022\014\n\004data\030\003 \001(\014\"\262\001\n\020PostTopicRequest\022\013\n"
    "\003cid\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006expiry\030\003 \001(\003"
    "\022\020\n\010forum_id\030\004 \001(\t\022\014\n\004sign\030\005 \001(\t\022\t\n\001v\030\006 "
    "\001(\t\022\020\n\010platform\030\007 \001(\t\022\021\n\tdevice_id\030\010 \001(\t"
    "\022\025\n\rauthorization\030\t \001(\t\022\014\n\004data\030\n \001(\014\"<\n"
    "\021PostTopicResponse\022\013\n\003cid\030\001 \001(\t\022\014\n\004type\030"
    "\002 \001(\t\022\014\n\004data\030\003 \001(\014\"E\n\024PublicServiceRequ"
    "est\022\013\n\003cid\030\001 \001(\t\022\022\n\nservice_id\030\002 \001(\t\022\014\n\004"
    "data\030\003 \001(\t\"T\n\025PublicServiceResponse\022\013\n\003c"
    "id\030\001 \001(\t\022\022\n\nservice_id\030\002 \001(\t\022\014\n\004data\030\003 \001"
    "(\t\022\014\n\004time\030\004 \001(\003\"q\n\023GroupLBSNearRequest\022"
    "\013\n\003cid\030\001 \001(\t\022\013\n\003lat\030\002 \001(\001\022\014\n\004long\030\003 \001(\001\022"
    "\r\n\005start\030\004 \001(\005\022\r\n\005limit\030\005 \001(\005\022\024\n\014max_dis"
    "tance\030\006 \001(\005\"A\n\024GroupLBSNearResponse\022\013\n\003c"
    "id\030\001 \001(\t\022\016\n\006status\030\002 \001(\005\022\014\n\004data\030\003 \001(\t\"K"
    "\n\020GroupCityRequest\022\013\n\003cid\030\001 \001(\t\022\014\n\004city\030"
    "\002 \001(\t\022\r\n\005start\030\003 \001(\005\022\r\n\005limit\030\004 \001(\005\">\n\021G"
    "roupCityResponse\022\013\n\003cid\030\001 \001(\t\022\016\n\006status\030"
    "\002 \001(\005\022\014\n\004data\030\003 \001(\t\"b\n\021PythonCoreRequest"
    "\022\013\n\003cid\030\001 \001(\t\022\024\n\014json_request\030\002 \001(\t\022\023\n\013m"
    "odule_name\030\003 \001(\t\022\025\n\rfunction_name\030\004 \001(\t\""
    "H\n\022PythonCoreResponse\022\013\n\003cid\030\001 \001(\t\022\025\n\rjs"
    "on_response\030\002 \001(\t\022\016\n\006status\030\003 \001(\005\"\355\004\n\rSe"
    "rvicePacket\022\014\n\004type\030\001 \002(\005\022$\n\rreply_reque"
    "st\030\002 \001(\0132\r.ReplyRequest\022&\n\016reply_respons"
    "e\030\003 \001(\0132\016.ReplyResponse\022-\n\022post_topic_re"
    "quest\030\004 \001(\0132\021.PostTopicRequest\022/\n\023post_t"
    "opic_response\030\005 \001(\0132\022.PostTopicResponse\022"
    "5\n\026public_service_request\030\006 \001(\0132\025.Public"
    "ServiceRequest\0227\n\027public_service_respons"
    "e\030\007 \001(\0132\026.PublicServiceResponse\0224\n\026group"
    "_lbs_near_request\030\010 \001(\0132\024.GroupLBSNearRe"
    "quest\0226\n\027group_lbs_near_response\030\t \001(\0132\025"
    ".GroupLBSNearResponse\022-\n\022group_city_requ"
    "est\030\n \001(\0132\021.GroupCityRequest\022/\n\023group_ci"
    "ty_response\030\013 \001(\0132\022.GroupCityResponse\022/\n"
    "\023python_core_request\030\014 \001(\0132\022.PythonCoreR"
    "equest\0221\n\024python_core_response\030\r \001(\0132\023.P"
    "ythonCoreResponse", 1777);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServicePacket.proto", &protobuf_RegisterTypes);
  ReplyRequest::default_instance_ = new ReplyRequest();
  ReplyResponse::default_instance_ = new ReplyResponse();
  PostTopicRequest::default_instance_ = new PostTopicRequest();
  PostTopicResponse::default_instance_ = new PostTopicResponse();
  PublicServiceRequest::default_instance_ = new PublicServiceRequest();
  PublicServiceResponse::default_instance_ = new PublicServiceResponse();
  GroupLBSNearRequest::default_instance_ = new GroupLBSNearRequest();
  GroupLBSNearResponse::default_instance_ = new GroupLBSNearResponse();
  GroupCityRequest::default_instance_ = new GroupCityRequest();
  GroupCityResponse::default_instance_ = new GroupCityResponse();
  PythonCoreRequest::default_instance_ = new PythonCoreRequest();
  PythonCoreResponse::default_instance_ = new PythonCoreResponse();
  ServicePacket::default_instance_ = new ServicePacket();
  ReplyRequest::default_instance_->InitAsDefaultInstance();
  ReplyResponse::default_instance_->InitAsDefaultInstance();
  PostTopicRequest::default_instance_->InitAsDefaultInstance();
  PostTopicResponse::default_instance_->InitAsDefaultInstance();
  PublicServiceRequest::default_instance_->InitAsDefaultInstance();
  PublicServiceResponse::default_instance_->InitAsDefaultInstance();
  GroupLBSNearRequest::default_instance_->InitAsDefaultInstance();
  GroupLBSNearResponse::default_instance_->InitAsDefaultInstance();
  GroupCityRequest::default_instance_->InitAsDefaultInstance();
  GroupCityResponse::default_instance_->InitAsDefaultInstance();
  PythonCoreRequest::default_instance_->InitAsDefaultInstance();
  PythonCoreResponse::default_instance_->InitAsDefaultInstance();
  ServicePacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServicePacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServicePacket_2eproto {
  StaticDescriptorInitializer_ServicePacket_2eproto() {
    protobuf_AddDesc_ServicePacket_2eproto();
  }
} static_descriptor_initializer_ServicePacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReplyRequest::kCidFieldNumber;
const int ReplyRequest::kTypeFieldNumber;
const int ReplyRequest::kExpiryFieldNumber;
const int ReplyRequest::kTopicIdFieldNumber;
const int ReplyRequest::kSignFieldNumber;
const int ReplyRequest::kVFieldNumber;
const int ReplyRequest::kPlatformFieldNumber;
const int ReplyRequest::kDeviceIdFieldNumber;
const int ReplyRequest::kAuthorizationFieldNumber;
const int ReplyRequest::kDataFieldNumber;
#endif  // !_MSC_VER

ReplyRequest::ReplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyRequest::InitAsDefaultInstance() {
}

ReplyRequest::ReplyRequest(const ReplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyRequest::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expiry_ = GOOGLE_LONGLONG(0);
  topic_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  v_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authorization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyRequest::~ReplyRequest() {
  SharedDtor();
}

void ReplyRequest::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (topic_id_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_id_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (v_ != &::google::protobuf::internal::kEmptyString) {
    delete v_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (authorization_ != &::google::protobuf::internal::kEmptyString) {
    delete authorization_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ReplyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyRequest_descriptor_;
}

const ReplyRequest& ReplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

ReplyRequest* ReplyRequest::default_instance_ = NULL;

ReplyRequest* ReplyRequest::New() const {
  return new ReplyRequest;
}

void ReplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    expiry_ = GOOGLE_LONGLONG(0);
    if (has_topic_id()) {
      if (topic_id_ != &::google::protobuf::internal::kEmptyString) {
        topic_id_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_v()) {
      if (v_ != &::google::protobuf::internal::kEmptyString) {
        v_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_authorization()) {
      if (authorization_ != &::google::protobuf::internal::kEmptyString) {
        authorization_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expiry;
        break;
      }

      // optional int64 expiry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_)));
          set_has_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_topic_id;
        break;
      }

      // optional string topic_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_id().data(), this->topic_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sign;
        break;
      }

      // optional string sign = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_v;
        break;
      }

      // optional string v = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v().data(), this->v().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_platform;
        break;
      }

      // optional string platform = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_device_id;
        break;
      }

      // optional string device_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_authorization;
        break;
      }

      // optional string authorization = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorization().data(), this->authorization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_data;
        break;
      }

      // optional bytes data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional int64 expiry = 3;
  if (has_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expiry(), output);
  }

  // optional string topic_id = 4;
  if (has_topic_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_id().data(), this->topic_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topic_id(), output);
  }

  // optional string sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sign(), output);
  }

  // optional string v = 6;
  if (has_v()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->v(), output);
  }

  // optional string platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->platform(), output);
  }

  // optional string device_id = 8;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->device_id(), output);
  }

  // optional string authorization = 9;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->authorization(), output);
  }

  // optional bytes data = 10;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int64 expiry = 3;
  if (has_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expiry(), target);
  }

  // optional string topic_id = 4;
  if (has_topic_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_id().data(), this->topic_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->topic_id(), target);
  }

  // optional string sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sign(), target);
  }

  // optional string v = 6;
  if (has_v()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->v(), target);
  }

  // optional string platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->platform(), target);
  }

  // optional string device_id = 8;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_id(), target);
  }

  // optional string authorization = 9;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->authorization(), target);
  }

  // optional bytes data = 10;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int64 expiry = 3;
    if (has_expiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry());
    }

    // optional string topic_id = 4;
    if (has_topic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic_id());
    }

    // optional string sign = 5;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string v = 6;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v());
    }

    // optional string platform = 7;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string device_id = 8;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string authorization = 9;
    if (has_authorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorization());
    }

    // optional bytes data = 10;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyRequest::MergeFrom(const ReplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_expiry()) {
      set_expiry(from.expiry());
    }
    if (from.has_topic_id()) {
      set_topic_id(from.topic_id());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_authorization()) {
      set_authorization(from.authorization());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyRequest::CopyFrom(const ReplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyRequest::IsInitialized() const {

  return true;
}

void ReplyRequest::Swap(ReplyRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(expiry_, other->expiry_);
    std::swap(topic_id_, other->topic_id_);
    std::swap(sign_, other->sign_);
    std::swap(v_, other->v_);
    std::swap(platform_, other->platform_);
    std::swap(device_id_, other->device_id_);
    std::swap(authorization_, other->authorization_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyRequest_descriptor_;
  metadata.reflection = ReplyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyResponse::kCidFieldNumber;
const int ReplyResponse::kTypeFieldNumber;
const int ReplyResponse::kDataFieldNumber;
#endif  // !_MSC_VER

ReplyResponse::ReplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyResponse::InitAsDefaultInstance() {
}

ReplyResponse::ReplyResponse(const ReplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyResponse::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyResponse::~ReplyResponse() {
  SharedDtor();
}

void ReplyResponse::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ReplyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyResponse_descriptor_;
}

const ReplyResponse& ReplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

ReplyResponse* ReplyResponse::default_instance_ = NULL;

ReplyResponse* ReplyResponse::New() const {
  return new ReplyResponse;
}

void ReplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyResponse::MergeFrom(const ReplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyResponse::CopyFrom(const ReplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyResponse::IsInitialized() const {

  return true;
}

void ReplyResponse::Swap(ReplyResponse* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyResponse_descriptor_;
  metadata.reflection = ReplyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostTopicRequest::kCidFieldNumber;
const int PostTopicRequest::kTypeFieldNumber;
const int PostTopicRequest::kExpiryFieldNumber;
const int PostTopicRequest::kForumIdFieldNumber;
const int PostTopicRequest::kSignFieldNumber;
const int PostTopicRequest::kVFieldNumber;
const int PostTopicRequest::kPlatformFieldNumber;
const int PostTopicRequest::kDeviceIdFieldNumber;
const int PostTopicRequest::kAuthorizationFieldNumber;
const int PostTopicRequest::kDataFieldNumber;
#endif  // !_MSC_VER

PostTopicRequest::PostTopicRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostTopicRequest::InitAsDefaultInstance() {
}

PostTopicRequest::PostTopicRequest(const PostTopicRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostTopicRequest::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expiry_ = GOOGLE_LONGLONG(0);
  forum_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  v_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authorization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostTopicRequest::~PostTopicRequest() {
  SharedDtor();
}

void PostTopicRequest::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (forum_id_ != &::google::protobuf::internal::kEmptyString) {
    delete forum_id_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (v_ != &::google::protobuf::internal::kEmptyString) {
    delete v_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (authorization_ != &::google::protobuf::internal::kEmptyString) {
    delete authorization_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PostTopicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostTopicRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostTopicRequest_descriptor_;
}

const PostTopicRequest& PostTopicRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

PostTopicRequest* PostTopicRequest::default_instance_ = NULL;

PostTopicRequest* PostTopicRequest::New() const {
  return new PostTopicRequest;
}

void PostTopicRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    expiry_ = GOOGLE_LONGLONG(0);
    if (has_forum_id()) {
      if (forum_id_ != &::google::protobuf::internal::kEmptyString) {
        forum_id_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_v()) {
      if (v_ != &::google::protobuf::internal::kEmptyString) {
        v_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_authorization()) {
      if (authorization_ != &::google::protobuf::internal::kEmptyString) {
        authorization_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostTopicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expiry;
        break;
      }

      // optional int64 expiry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_)));
          set_has_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_forum_id;
        break;
      }

      // optional string forum_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forum_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forum_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->forum_id().data(), this->forum_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sign;
        break;
      }

      // optional string sign = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_v;
        break;
      }

      // optional string v = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v().data(), this->v().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_platform;
        break;
      }

      // optional string platform = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_device_id;
        break;
      }

      // optional string device_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_authorization;
        break;
      }

      // optional string authorization = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorization().data(), this->authorization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_data;
        break;
      }

      // optional bytes data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostTopicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional int64 expiry = 3;
  if (has_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expiry(), output);
  }

  // optional string forum_id = 4;
  if (has_forum_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->forum_id().data(), this->forum_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->forum_id(), output);
  }

  // optional string sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sign(), output);
  }

  // optional string v = 6;
  if (has_v()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->v(), output);
  }

  // optional string platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->platform(), output);
  }

  // optional string device_id = 8;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->device_id(), output);
  }

  // optional string authorization = 9;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->authorization(), output);
  }

  // optional bytes data = 10;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostTopicRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int64 expiry = 3;
  if (has_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expiry(), target);
  }

  // optional string forum_id = 4;
  if (has_forum_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->forum_id().data(), this->forum_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->forum_id(), target);
  }

  // optional string sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sign(), target);
  }

  // optional string v = 6;
  if (has_v()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v().data(), this->v().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->v(), target);
  }

  // optional string platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->platform(), target);
  }

  // optional string device_id = 8;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_id(), target);
  }

  // optional string authorization = 9;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->authorization(), target);
  }

  // optional bytes data = 10;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostTopicRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int64 expiry = 3;
    if (has_expiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry());
    }

    // optional string forum_id = 4;
    if (has_forum_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->forum_id());
    }

    // optional string sign = 5;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string v = 6;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v());
    }

    // optional string platform = 7;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string device_id = 8;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string authorization = 9;
    if (has_authorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorization());
    }

    // optional bytes data = 10;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostTopicRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostTopicRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostTopicRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostTopicRequest::MergeFrom(const PostTopicRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_expiry()) {
      set_expiry(from.expiry());
    }
    if (from.has_forum_id()) {
      set_forum_id(from.forum_id());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_authorization()) {
      set_authorization(from.authorization());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostTopicRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostTopicRequest::CopyFrom(const PostTopicRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTopicRequest::IsInitialized() const {

  return true;
}

void PostTopicRequest::Swap(PostTopicRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(expiry_, other->expiry_);
    std::swap(forum_id_, other->forum_id_);
    std::swap(sign_, other->sign_);
    std::swap(v_, other->v_);
    std::swap(platform_, other->platform_);
    std::swap(device_id_, other->device_id_);
    std::swap(authorization_, other->authorization_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostTopicRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostTopicRequest_descriptor_;
  metadata.reflection = PostTopicRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostTopicResponse::kCidFieldNumber;
const int PostTopicResponse::kTypeFieldNumber;
const int PostTopicResponse::kDataFieldNumber;
#endif  // !_MSC_VER

PostTopicResponse::PostTopicResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostTopicResponse::InitAsDefaultInstance() {
}

PostTopicResponse::PostTopicResponse(const PostTopicResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostTopicResponse::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostTopicResponse::~PostTopicResponse() {
  SharedDtor();
}

void PostTopicResponse::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PostTopicResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostTopicResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostTopicResponse_descriptor_;
}

const PostTopicResponse& PostTopicResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

PostTopicResponse* PostTopicResponse::default_instance_ = NULL;

PostTopicResponse* PostTopicResponse::New() const {
  return new PostTopicResponse;
}

void PostTopicResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostTopicResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostTopicResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostTopicResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostTopicResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostTopicResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostTopicResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostTopicResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostTopicResponse::MergeFrom(const PostTopicResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostTopicResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostTopicResponse::CopyFrom(const PostTopicResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTopicResponse::IsInitialized() const {

  return true;
}

void PostTopicResponse::Swap(PostTopicResponse* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostTopicResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostTopicResponse_descriptor_;
  metadata.reflection = PostTopicResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublicServiceRequest::kCidFieldNumber;
const int PublicServiceRequest::kServiceIdFieldNumber;
const int PublicServiceRequest::kDataFieldNumber;
#endif  // !_MSC_VER

PublicServiceRequest::PublicServiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublicServiceRequest::InitAsDefaultInstance() {
}

PublicServiceRequest::PublicServiceRequest(const PublicServiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublicServiceRequest::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublicServiceRequest::~PublicServiceRequest() {
  SharedDtor();
}

void PublicServiceRequest::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PublicServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublicServiceRequest_descriptor_;
}

const PublicServiceRequest& PublicServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

PublicServiceRequest* PublicServiceRequest::default_instance_ = NULL;

PublicServiceRequest* PublicServiceRequest::New() const {
  return new PublicServiceRequest;
}

void PublicServiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublicServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_id;
        break;
      }

      // optional string service_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublicServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string service_id = 2;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->service_id(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublicServiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string service_id = 2;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_id(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublicServiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string service_id = 2;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublicServiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublicServiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublicServiceRequest::MergeFrom(const PublicServiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublicServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicServiceRequest::CopyFrom(const PublicServiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicServiceRequest::IsInitialized() const {

  return true;
}

void PublicServiceRequest::Swap(PublicServiceRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(service_id_, other->service_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublicServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublicServiceRequest_descriptor_;
  metadata.reflection = PublicServiceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublicServiceResponse::kCidFieldNumber;
const int PublicServiceResponse::kServiceIdFieldNumber;
const int PublicServiceResponse::kDataFieldNumber;
const int PublicServiceResponse::kTimeFieldNumber;
#endif  // !_MSC_VER

PublicServiceResponse::PublicServiceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublicServiceResponse::InitAsDefaultInstance() {
}

PublicServiceResponse::PublicServiceResponse(const PublicServiceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublicServiceResponse::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublicServiceResponse::~PublicServiceResponse() {
  SharedDtor();
}

void PublicServiceResponse::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PublicServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublicServiceResponse_descriptor_;
}

const PublicServiceResponse& PublicServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

PublicServiceResponse* PublicServiceResponse::default_instance_ = NULL;

PublicServiceResponse* PublicServiceResponse::New() const {
  return new PublicServiceResponse;
}

void PublicServiceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublicServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_id;
        break;
      }

      // optional string service_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublicServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string service_id = 2;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->service_id(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublicServiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string service_id = 2;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_id(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublicServiceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string service_id = 2;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublicServiceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublicServiceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublicServiceResponse::MergeFrom(const PublicServiceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublicServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicServiceResponse::CopyFrom(const PublicServiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicServiceResponse::IsInitialized() const {

  return true;
}

void PublicServiceResponse::Swap(PublicServiceResponse* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(service_id_, other->service_id_);
    std::swap(data_, other->data_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublicServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublicServiceResponse_descriptor_;
  metadata.reflection = PublicServiceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupLBSNearRequest::kCidFieldNumber;
const int GroupLBSNearRequest::kLatFieldNumber;
const int GroupLBSNearRequest::kLongFieldNumber;
const int GroupLBSNearRequest::kStartFieldNumber;
const int GroupLBSNearRequest::kLimitFieldNumber;
const int GroupLBSNearRequest::kMaxDistanceFieldNumber;
#endif  // !_MSC_VER

GroupLBSNearRequest::GroupLBSNearRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupLBSNearRequest::InitAsDefaultInstance() {
}

GroupLBSNearRequest::GroupLBSNearRequest(const GroupLBSNearRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupLBSNearRequest::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lat_ = 0;
  long__ = 0;
  start_ = 0;
  limit_ = 0;
  max_distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupLBSNearRequest::~GroupLBSNearRequest() {
  SharedDtor();
}

void GroupLBSNearRequest::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (this != default_instance_) {
  }
}

void GroupLBSNearRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupLBSNearRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupLBSNearRequest_descriptor_;
}

const GroupLBSNearRequest& GroupLBSNearRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

GroupLBSNearRequest* GroupLBSNearRequest::default_instance_ = NULL;

GroupLBSNearRequest* GroupLBSNearRequest::New() const {
  return new GroupLBSNearRequest;
}

void GroupLBSNearRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    lat_ = 0;
    long__ = 0;
    start_ = 0;
    limit_ = 0;
    max_distance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupLBSNearRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // optional double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_long;
        break;
      }

      // optional double long = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long__)));
          set_has_long_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // optional int32 start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // optional int32 limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_distance;
        break;
      }

      // optional int32 max_distance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_distance_)));
          set_has_max_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupLBSNearRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional double long = 3;
  if (has_long_()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->long_(), output);
  }

  // optional int32 start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start(), output);
  }

  // optional int32 limit = 5;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit(), output);
  }

  // optional int32 max_distance = 6;
  if (has_max_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_distance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupLBSNearRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // optional double long = 3;
  if (has_long_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->long_(), target);
  }

  // optional int32 start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start(), target);
  }

  // optional int32 limit = 5;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit(), target);
  }

  // optional int32 max_distance = 6;
  if (has_max_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_distance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupLBSNearRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double long = 3;
    if (has_long_()) {
      total_size += 1 + 8;
    }

    // optional int32 start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 limit = 5;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional int32 max_distance = 6;
    if (has_max_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_distance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupLBSNearRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupLBSNearRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupLBSNearRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupLBSNearRequest::MergeFrom(const GroupLBSNearRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_long_()) {
      set_long_(from.long_());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_max_distance()) {
      set_max_distance(from.max_distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupLBSNearRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupLBSNearRequest::CopyFrom(const GroupLBSNearRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupLBSNearRequest::IsInitialized() const {

  return true;
}

void GroupLBSNearRequest::Swap(GroupLBSNearRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(lat_, other->lat_);
    std::swap(long__, other->long__);
    std::swap(start_, other->start_);
    std::swap(limit_, other->limit_);
    std::swap(max_distance_, other->max_distance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupLBSNearRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupLBSNearRequest_descriptor_;
  metadata.reflection = GroupLBSNearRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupLBSNearResponse::kCidFieldNumber;
const int GroupLBSNearResponse::kStatusFieldNumber;
const int GroupLBSNearResponse::kDataFieldNumber;
#endif  // !_MSC_VER

GroupLBSNearResponse::GroupLBSNearResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupLBSNearResponse::InitAsDefaultInstance() {
}

GroupLBSNearResponse::GroupLBSNearResponse(const GroupLBSNearResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupLBSNearResponse::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupLBSNearResponse::~GroupLBSNearResponse() {
  SharedDtor();
}

void GroupLBSNearResponse::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GroupLBSNearResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupLBSNearResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupLBSNearResponse_descriptor_;
}

const GroupLBSNearResponse& GroupLBSNearResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

GroupLBSNearResponse* GroupLBSNearResponse::default_instance_ = NULL;

GroupLBSNearResponse* GroupLBSNearResponse::New() const {
  return new GroupLBSNearResponse;
}

void GroupLBSNearResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    status_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupLBSNearResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupLBSNearResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupLBSNearResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupLBSNearResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupLBSNearResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupLBSNearResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupLBSNearResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupLBSNearResponse::MergeFrom(const GroupLBSNearResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupLBSNearResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupLBSNearResponse::CopyFrom(const GroupLBSNearResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupLBSNearResponse::IsInitialized() const {

  return true;
}

void GroupLBSNearResponse::Swap(GroupLBSNearResponse* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(status_, other->status_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupLBSNearResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupLBSNearResponse_descriptor_;
  metadata.reflection = GroupLBSNearResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupCityRequest::kCidFieldNumber;
const int GroupCityRequest::kCityFieldNumber;
const int GroupCityRequest::kStartFieldNumber;
const int GroupCityRequest::kLimitFieldNumber;
#endif  // !_MSC_VER

GroupCityRequest::GroupCityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupCityRequest::InitAsDefaultInstance() {
}

GroupCityRequest::GroupCityRequest(const GroupCityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupCityRequest::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ = 0;
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupCityRequest::~GroupCityRequest() {
  SharedDtor();
}

void GroupCityRequest::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void GroupCityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupCityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupCityRequest_descriptor_;
}

const GroupCityRequest& GroupCityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

GroupCityRequest* GroupCityRequest::default_instance_ = NULL;

GroupCityRequest* GroupCityRequest::New() const {
  return new GroupCityRequest;
}

void GroupCityRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    start_ = 0;
    limit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupCityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional string city = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start;
        break;
      }

      // optional int32 start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // optional int32 limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupCityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->city(), output);
  }

  // optional int32 start = 3;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start(), output);
  }

  // optional int32 limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupCityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->city(), target);
  }

  // optional int32 start = 3;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start(), target);
  }

  // optional int32 limit = 4;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupCityRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional int32 start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupCityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupCityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupCityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupCityRequest::MergeFrom(const GroupCityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupCityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupCityRequest::CopyFrom(const GroupCityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCityRequest::IsInitialized() const {

  return true;
}

void GroupCityRequest::Swap(GroupCityRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(city_, other->city_);
    std::swap(start_, other->start_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupCityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupCityRequest_descriptor_;
  metadata.reflection = GroupCityRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupCityResponse::kCidFieldNumber;
const int GroupCityResponse::kStatusFieldNumber;
const int GroupCityResponse::kDataFieldNumber;
#endif  // !_MSC_VER

GroupCityResponse::GroupCityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupCityResponse::InitAsDefaultInstance() {
}

GroupCityResponse::GroupCityResponse(const GroupCityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupCityResponse::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupCityResponse::~GroupCityResponse() {
  SharedDtor();
}

void GroupCityResponse::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GroupCityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupCityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupCityResponse_descriptor_;
}

const GroupCityResponse& GroupCityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

GroupCityResponse* GroupCityResponse::default_instance_ = NULL;

GroupCityResponse* GroupCityResponse::New() const {
  return new GroupCityResponse;
}

void GroupCityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    status_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupCityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupCityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupCityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupCityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupCityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupCityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupCityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupCityResponse::MergeFrom(const GroupCityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupCityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupCityResponse::CopyFrom(const GroupCityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCityResponse::IsInitialized() const {

  return true;
}

void GroupCityResponse::Swap(GroupCityResponse* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(status_, other->status_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupCityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupCityResponse_descriptor_;
  metadata.reflection = GroupCityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PythonCoreRequest::kCidFieldNumber;
const int PythonCoreRequest::kJsonRequestFieldNumber;
const int PythonCoreRequest::kModuleNameFieldNumber;
const int PythonCoreRequest::kFunctionNameFieldNumber;
#endif  // !_MSC_VER

PythonCoreRequest::PythonCoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PythonCoreRequest::InitAsDefaultInstance() {
}

PythonCoreRequest::PythonCoreRequest(const PythonCoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PythonCoreRequest::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  json_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  function_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PythonCoreRequest::~PythonCoreRequest() {
  SharedDtor();
}

void PythonCoreRequest::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (json_request_ != &::google::protobuf::internal::kEmptyString) {
    delete json_request_;
  }
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (function_name_ != &::google::protobuf::internal::kEmptyString) {
    delete function_name_;
  }
  if (this != default_instance_) {
  }
}

void PythonCoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PythonCoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PythonCoreRequest_descriptor_;
}

const PythonCoreRequest& PythonCoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

PythonCoreRequest* PythonCoreRequest::default_instance_ = NULL;

PythonCoreRequest* PythonCoreRequest::New() const {
  return new PythonCoreRequest;
}

void PythonCoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_json_request()) {
      if (json_request_ != &::google::protobuf::internal::kEmptyString) {
        json_request_->clear();
      }
    }
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    if (has_function_name()) {
      if (function_name_ != &::google::protobuf::internal::kEmptyString) {
        function_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PythonCoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_json_request;
        break;
      }

      // optional string json_request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_json_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_request()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->json_request().data(), this->json_request().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_module_name;
        break;
      }

      // optional string module_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_function_name;
        break;
      }

      // optional string function_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->function_name().data(), this->function_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PythonCoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string json_request = 2;
  if (has_json_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->json_request().data(), this->json_request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->json_request(), output);
  }

  // optional string module_name = 3;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->module_name(), output);
  }

  // optional string function_name = 4;
  if (has_function_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->function_name().data(), this->function_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->function_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PythonCoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string json_request = 2;
  if (has_json_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->json_request().data(), this->json_request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_request(), target);
  }

  // optional string module_name = 3;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->module_name(), target);
  }

  // optional string function_name = 4;
  if (has_function_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->function_name().data(), this->function_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->function_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PythonCoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string json_request = 2;
    if (has_json_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_request());
    }

    // optional string module_name = 3;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // optional string function_name = 4;
    if (has_function_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PythonCoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PythonCoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PythonCoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PythonCoreRequest::MergeFrom(const PythonCoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_json_request()) {
      set_json_request(from.json_request());
    }
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_function_name()) {
      set_function_name(from.function_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PythonCoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PythonCoreRequest::CopyFrom(const PythonCoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonCoreRequest::IsInitialized() const {

  return true;
}

void PythonCoreRequest::Swap(PythonCoreRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(json_request_, other->json_request_);
    std::swap(module_name_, other->module_name_);
    std::swap(function_name_, other->function_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PythonCoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PythonCoreRequest_descriptor_;
  metadata.reflection = PythonCoreRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PythonCoreResponse::kCidFieldNumber;
const int PythonCoreResponse::kJsonResponseFieldNumber;
const int PythonCoreResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

PythonCoreResponse::PythonCoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PythonCoreResponse::InitAsDefaultInstance() {
}

PythonCoreResponse::PythonCoreResponse(const PythonCoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PythonCoreResponse::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  json_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PythonCoreResponse::~PythonCoreResponse() {
  SharedDtor();
}

void PythonCoreResponse::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (json_response_ != &::google::protobuf::internal::kEmptyString) {
    delete json_response_;
  }
  if (this != default_instance_) {
  }
}

void PythonCoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PythonCoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PythonCoreResponse_descriptor_;
}

const PythonCoreResponse& PythonCoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

PythonCoreResponse* PythonCoreResponse::default_instance_ = NULL;

PythonCoreResponse* PythonCoreResponse::New() const {
  return new PythonCoreResponse;
}

void PythonCoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_json_response()) {
      if (json_response_ != &::google::protobuf::internal::kEmptyString) {
        json_response_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PythonCoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_json_response;
        break;
      }

      // optional string json_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_json_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->json_response().data(), this->json_response().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PythonCoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string json_response = 2;
  if (has_json_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->json_response().data(), this->json_response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->json_response(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PythonCoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string json_response = 2;
  if (has_json_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->json_response().data(), this->json_response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_response(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PythonCoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string json_response = 2;
    if (has_json_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_response());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PythonCoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PythonCoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PythonCoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PythonCoreResponse::MergeFrom(const PythonCoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_json_response()) {
      set_json_response(from.json_response());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PythonCoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PythonCoreResponse::CopyFrom(const PythonCoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonCoreResponse::IsInitialized() const {

  return true;
}

void PythonCoreResponse::Swap(PythonCoreResponse* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(json_response_, other->json_response_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PythonCoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PythonCoreResponse_descriptor_;
  metadata.reflection = PythonCoreResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServicePacket::kTypeFieldNumber;
const int ServicePacket::kReplyRequestFieldNumber;
const int ServicePacket::kReplyResponseFieldNumber;
const int ServicePacket::kPostTopicRequestFieldNumber;
const int ServicePacket::kPostTopicResponseFieldNumber;
const int ServicePacket::kPublicServiceRequestFieldNumber;
const int ServicePacket::kPublicServiceResponseFieldNumber;
const int ServicePacket::kGroupLbsNearRequestFieldNumber;
const int ServicePacket::kGroupLbsNearResponseFieldNumber;
const int ServicePacket::kGroupCityRequestFieldNumber;
const int ServicePacket::kGroupCityResponseFieldNumber;
const int ServicePacket::kPythonCoreRequestFieldNumber;
const int ServicePacket::kPythonCoreResponseFieldNumber;
#endif  // !_MSC_VER

ServicePacket::ServicePacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServicePacket::InitAsDefaultInstance() {
  reply_request_ = const_cast< ::ReplyRequest*>(&::ReplyRequest::default_instance());
  reply_response_ = const_cast< ::ReplyResponse*>(&::ReplyResponse::default_instance());
  post_topic_request_ = const_cast< ::PostTopicRequest*>(&::PostTopicRequest::default_instance());
  post_topic_response_ = const_cast< ::PostTopicResponse*>(&::PostTopicResponse::default_instance());
  public_service_request_ = const_cast< ::PublicServiceRequest*>(&::PublicServiceRequest::default_instance());
  public_service_response_ = const_cast< ::PublicServiceResponse*>(&::PublicServiceResponse::default_instance());
  group_lbs_near_request_ = const_cast< ::GroupLBSNearRequest*>(&::GroupLBSNearRequest::default_instance());
  group_lbs_near_response_ = const_cast< ::GroupLBSNearResponse*>(&::GroupLBSNearResponse::default_instance());
  group_city_request_ = const_cast< ::GroupCityRequest*>(&::GroupCityRequest::default_instance());
  group_city_response_ = const_cast< ::GroupCityResponse*>(&::GroupCityResponse::default_instance());
  python_core_request_ = const_cast< ::PythonCoreRequest*>(&::PythonCoreRequest::default_instance());
  python_core_response_ = const_cast< ::PythonCoreResponse*>(&::PythonCoreResponse::default_instance());
}

ServicePacket::ServicePacket(const ServicePacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServicePacket::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  reply_request_ = NULL;
  reply_response_ = NULL;
  post_topic_request_ = NULL;
  post_topic_response_ = NULL;
  public_service_request_ = NULL;
  public_service_response_ = NULL;
  group_lbs_near_request_ = NULL;
  group_lbs_near_response_ = NULL;
  group_city_request_ = NULL;
  group_city_response_ = NULL;
  python_core_request_ = NULL;
  python_core_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServicePacket::~ServicePacket() {
  SharedDtor();
}

void ServicePacket::SharedDtor() {
  if (this != default_instance_) {
    delete reply_request_;
    delete reply_response_;
    delete post_topic_request_;
    delete post_topic_response_;
    delete public_service_request_;
    delete public_service_response_;
    delete group_lbs_near_request_;
    delete group_lbs_near_response_;
    delete group_city_request_;
    delete group_city_response_;
    delete python_core_request_;
    delete python_core_response_;
  }
}

void ServicePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServicePacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServicePacket_descriptor_;
}

const ServicePacket& ServicePacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServicePacket_2eproto();
  return *default_instance_;
}

ServicePacket* ServicePacket::default_instance_ = NULL;

ServicePacket* ServicePacket::New() const {
  return new ServicePacket;
}

void ServicePacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_reply_request()) {
      if (reply_request_ != NULL) reply_request_->::ReplyRequest::Clear();
    }
    if (has_reply_response()) {
      if (reply_response_ != NULL) reply_response_->::ReplyResponse::Clear();
    }
    if (has_post_topic_request()) {
      if (post_topic_request_ != NULL) post_topic_request_->::PostTopicRequest::Clear();
    }
    if (has_post_topic_response()) {
      if (post_topic_response_ != NULL) post_topic_response_->::PostTopicResponse::Clear();
    }
    if (has_public_service_request()) {
      if (public_service_request_ != NULL) public_service_request_->::PublicServiceRequest::Clear();
    }
    if (has_public_service_response()) {
      if (public_service_response_ != NULL) public_service_response_->::PublicServiceResponse::Clear();
    }
    if (has_group_lbs_near_request()) {
      if (group_lbs_near_request_ != NULL) group_lbs_near_request_->::GroupLBSNearRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_group_lbs_near_response()) {
      if (group_lbs_near_response_ != NULL) group_lbs_near_response_->::GroupLBSNearResponse::Clear();
    }
    if (has_group_city_request()) {
      if (group_city_request_ != NULL) group_city_request_->::GroupCityRequest::Clear();
    }
    if (has_group_city_response()) {
      if (group_city_response_ != NULL) group_city_response_->::GroupCityResponse::Clear();
    }
    if (has_python_core_request()) {
      if (python_core_request_ != NULL) python_core_request_->::PythonCoreRequest::Clear();
    }
    if (has_python_core_response()) {
      if (python_core_response_ != NULL) python_core_response_->::PythonCoreResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServicePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reply_request;
        break;
      }

      // optional .ReplyRequest reply_request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reply_response;
        break;
      }

      // optional .ReplyResponse reply_response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_post_topic_request;
        break;
      }

      // optional .PostTopicRequest post_topic_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post_topic_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_topic_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_post_topic_response;
        break;
      }

      // optional .PostTopicResponse post_topic_response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post_topic_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_topic_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_public_service_request;
        break;
      }

      // optional .PublicServiceRequest public_service_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_service_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_service_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_public_service_response;
        break;
      }

      // optional .PublicServiceResponse public_service_response = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_service_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_service_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_group_lbs_near_request;
        break;
      }

      // optional .GroupLBSNearRequest group_lbs_near_request = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_lbs_near_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_lbs_near_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_group_lbs_near_response;
        break;
      }

      // optional .GroupLBSNearResponse group_lbs_near_response = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_lbs_near_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_lbs_near_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_group_city_request;
        break;
      }

      // optional .GroupCityRequest group_city_request = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_city_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_city_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_group_city_response;
        break;
      }

      // optional .GroupCityResponse group_city_response = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_city_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_city_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_python_core_request;
        break;
      }

      // optional .PythonCoreRequest python_core_request = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_python_core_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_python_core_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_python_core_response;
        break;
      }

      // optional .PythonCoreResponse python_core_response = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_python_core_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_python_core_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServicePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .ReplyRequest reply_request = 2;
  if (has_reply_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reply_request(), output);
  }

  // optional .ReplyResponse reply_response = 3;
  if (has_reply_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reply_response(), output);
  }

  // optional .PostTopicRequest post_topic_request = 4;
  if (has_post_topic_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->post_topic_request(), output);
  }

  // optional .PostTopicResponse post_topic_response = 5;
  if (has_post_topic_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->post_topic_response(), output);
  }

  // optional .PublicServiceRequest public_service_request = 6;
  if (has_public_service_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->public_service_request(), output);
  }

  // optional .PublicServiceResponse public_service_response = 7;
  if (has_public_service_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->public_service_response(), output);
  }

  // optional .GroupLBSNearRequest group_lbs_near_request = 8;
  if (has_group_lbs_near_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->group_lbs_near_request(), output);
  }

  // optional .GroupLBSNearResponse group_lbs_near_response = 9;
  if (has_group_lbs_near_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->group_lbs_near_response(), output);
  }

  // optional .GroupCityRequest group_city_request = 10;
  if (has_group_city_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->group_city_request(), output);
  }

  // optional .GroupCityResponse group_city_response = 11;
  if (has_group_city_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->group_city_response(), output);
  }

  // optional .PythonCoreRequest python_core_request = 12;
  if (has_python_core_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->python_core_request(), output);
  }

  // optional .PythonCoreResponse python_core_response = 13;
  if (has_python_core_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->python_core_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServicePacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .ReplyRequest reply_request = 2;
  if (has_reply_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reply_request(), target);
  }

  // optional .ReplyResponse reply_response = 3;
  if (has_reply_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reply_response(), target);
  }

  // optional .PostTopicRequest post_topic_request = 4;
  if (has_post_topic_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->post_topic_request(), target);
  }

  // optional .PostTopicResponse post_topic_response = 5;
  if (has_post_topic_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->post_topic_response(), target);
  }

  // optional .PublicServiceRequest public_service_request = 6;
  if (has_public_service_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->public_service_request(), target);
  }

  // optional .PublicServiceResponse public_service_response = 7;
  if (has_public_service_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->public_service_response(), target);
  }

  // optional .GroupLBSNearRequest group_lbs_near_request = 8;
  if (has_group_lbs_near_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->group_lbs_near_request(), target);
  }

  // optional .GroupLBSNearResponse group_lbs_near_response = 9;
  if (has_group_lbs_near_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->group_lbs_near_response(), target);
  }

  // optional .GroupCityRequest group_city_request = 10;
  if (has_group_city_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->group_city_request(), target);
  }

  // optional .GroupCityResponse group_city_response = 11;
  if (has_group_city_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->group_city_response(), target);
  }

  // optional .PythonCoreRequest python_core_request = 12;
  if (has_python_core_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->python_core_request(), target);
  }

  // optional .PythonCoreResponse python_core_response = 13;
  if (has_python_core_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->python_core_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServicePacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .ReplyRequest reply_request = 2;
    if (has_reply_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reply_request());
    }

    // optional .ReplyResponse reply_response = 3;
    if (has_reply_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reply_response());
    }

    // optional .PostTopicRequest post_topic_request = 4;
    if (has_post_topic_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->post_topic_request());
    }

    // optional .PostTopicResponse post_topic_response = 5;
    if (has_post_topic_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->post_topic_response());
    }

    // optional .PublicServiceRequest public_service_request = 6;
    if (has_public_service_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_service_request());
    }

    // optional .PublicServiceResponse public_service_response = 7;
    if (has_public_service_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_service_response());
    }

    // optional .GroupLBSNearRequest group_lbs_near_request = 8;
    if (has_group_lbs_near_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_lbs_near_request());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .GroupLBSNearResponse group_lbs_near_response = 9;
    if (has_group_lbs_near_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_lbs_near_response());
    }

    // optional .GroupCityRequest group_city_request = 10;
    if (has_group_city_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_city_request());
    }

    // optional .GroupCityResponse group_city_response = 11;
    if (has_group_city_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_city_response());
    }

    // optional .PythonCoreRequest python_core_request = 12;
    if (has_python_core_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->python_core_request());
    }

    // optional .PythonCoreResponse python_core_response = 13;
    if (has_python_core_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->python_core_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServicePacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServicePacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServicePacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServicePacket::MergeFrom(const ServicePacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reply_request()) {
      mutable_reply_request()->::ReplyRequest::MergeFrom(from.reply_request());
    }
    if (from.has_reply_response()) {
      mutable_reply_response()->::ReplyResponse::MergeFrom(from.reply_response());
    }
    if (from.has_post_topic_request()) {
      mutable_post_topic_request()->::PostTopicRequest::MergeFrom(from.post_topic_request());
    }
    if (from.has_post_topic_response()) {
      mutable_post_topic_response()->::PostTopicResponse::MergeFrom(from.post_topic_response());
    }
    if (from.has_public_service_request()) {
      mutable_public_service_request()->::PublicServiceRequest::MergeFrom(from.public_service_request());
    }
    if (from.has_public_service_response()) {
      mutable_public_service_response()->::PublicServiceResponse::MergeFrom(from.public_service_response());
    }
    if (from.has_group_lbs_near_request()) {
      mutable_group_lbs_near_request()->::GroupLBSNearRequest::MergeFrom(from.group_lbs_near_request());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group_lbs_near_response()) {
      mutable_group_lbs_near_response()->::GroupLBSNearResponse::MergeFrom(from.group_lbs_near_response());
    }
    if (from.has_group_city_request()) {
      mutable_group_city_request()->::GroupCityRequest::MergeFrom(from.group_city_request());
    }
    if (from.has_group_city_response()) {
      mutable_group_city_response()->::GroupCityResponse::MergeFrom(from.group_city_response());
    }
    if (from.has_python_core_request()) {
      mutable_python_core_request()->::PythonCoreRequest::MergeFrom(from.python_core_request());
    }
    if (from.has_python_core_response()) {
      mutable_python_core_response()->::PythonCoreResponse::MergeFrom(from.python_core_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServicePacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServicePacket::CopyFrom(const ServicePacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServicePacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServicePacket::Swap(ServicePacket* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(reply_request_, other->reply_request_);
    std::swap(reply_response_, other->reply_response_);
    std::swap(post_topic_request_, other->post_topic_request_);
    std::swap(post_topic_response_, other->post_topic_response_);
    std::swap(public_service_request_, other->public_service_request_);
    std::swap(public_service_response_, other->public_service_response_);
    std::swap(group_lbs_near_request_, other->group_lbs_near_request_);
    std::swap(group_lbs_near_response_, other->group_lbs_near_response_);
    std::swap(group_city_request_, other->group_city_request_);
    std::swap(group_city_response_, other->group_city_response_);
    std::swap(python_core_request_, other->python_core_request_);
    std::swap(python_core_response_, other->python_core_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServicePacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServicePacket_descriptor_;
  metadata.reflection = ServicePacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
