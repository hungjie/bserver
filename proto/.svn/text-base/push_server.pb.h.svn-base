// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push_server.proto

#ifndef PROTOBUF_push_5fserver_2eproto__INCLUDED
#define PROTOBUF_push_5fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace meet_you {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_push_5fserver_2eproto();
void protobuf_AssignDesc_push_5fserver_2eproto();
void protobuf_ShutdownFile_push_5fserver_2eproto();

class PushRequest;
class PushResponse;
class PushPacket;
class PushCacheRequest;
class PushMessage;
class PushCacheResponse;

// ===================================================================

class PushRequest : public ::google::protobuf::Message {
 public:
  PushRequest();
  virtual ~PushRequest();

  PushRequest(const PushRequest& from);

  inline PushRequest& operator=(const PushRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushRequest& default_instance();

  void Swap(PushRequest* other);

  // implements Message ----------------------------------------------

  PushRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushRequest& from);
  void MergeFrom(const PushRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline const ::std::string& cid() const;
  inline void set_cid(const ::std::string& value);
  inline void set_cid(const char* value);
  inline void set_cid(const char* value, size_t size);
  inline ::std::string* mutable_cid();
  inline ::std::string* release_cid();
  inline void set_allocated_cid(::std::string* cid);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int64 msgid = 3;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 3;
  inline ::google::protobuf::int64 msgid() const;
  inline void set_msgid(::google::protobuf::int64 value);

  // optional int64 expiry = 4;
  inline bool has_expiry() const;
  inline void clear_expiry();
  static const int kExpiryFieldNumber = 4;
  inline ::google::protobuf::int64 expiry() const;
  inline void set_expiry(::google::protobuf::int64 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:meet_you.PushRequest)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_expiry();
  inline void clear_has_expiry();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cid_;
  ::std::string* type_;
  ::google::protobuf::int64 msgid_;
  ::google::protobuf::int64 expiry_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fserver_2eproto();

  void InitAsDefaultInstance();
  static PushRequest* default_instance_;
};
// -------------------------------------------------------------------

class PushResponse : public ::google::protobuf::Message {
 public:
  PushResponse();
  virtual ~PushResponse();

  PushResponse(const PushResponse& from);

  inline PushResponse& operator=(const PushResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushResponse& default_instance();

  void Swap(PushResponse* other);

  // implements Message ----------------------------------------------

  PushResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushResponse& from);
  void MergeFrom(const PushResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline const ::std::string& cid() const;
  inline void set_cid(const ::std::string& value);
  inline void set_cid(const char* value);
  inline void set_cid(const char* value, size_t size);
  inline ::std::string* mutable_cid();
  inline ::std::string* release_cid();
  inline void set_allocated_cid(::std::string* cid);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int64 msgid = 3;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 3;
  inline ::google::protobuf::int64 msgid() const;
  inline void set_msgid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:meet_you.PushResponse)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cid_;
  ::std::string* type_;
  ::google::protobuf::int64 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fserver_2eproto();

  void InitAsDefaultInstance();
  static PushResponse* default_instance_;
};
// -------------------------------------------------------------------

class PushPacket : public ::google::protobuf::Message {
 public:
  PushPacket();
  virtual ~PushPacket();

  PushPacket(const PushPacket& from);

  inline PushPacket& operator=(const PushPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushPacket& default_instance();

  void Swap(PushPacket* other);

  // implements Message ----------------------------------------------

  PushPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushPacket& from);
  void MergeFrom(const PushPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .meet_you.PushRequest push_req = 2;
  inline bool has_push_req() const;
  inline void clear_push_req();
  static const int kPushReqFieldNumber = 2;
  inline const ::meet_you::PushRequest& push_req() const;
  inline ::meet_you::PushRequest* mutable_push_req();
  inline ::meet_you::PushRequest* release_push_req();
  inline void set_allocated_push_req(::meet_you::PushRequest* push_req);

  // optional .meet_you.PushResponse push_resp = 3;
  inline bool has_push_resp() const;
  inline void clear_push_resp();
  static const int kPushRespFieldNumber = 3;
  inline const ::meet_you::PushResponse& push_resp() const;
  inline ::meet_you::PushResponse* mutable_push_resp();
  inline ::meet_you::PushResponse* release_push_resp();
  inline void set_allocated_push_resp(::meet_you::PushResponse* push_resp);

  // optional .meet_you.PushCacheRequest push_cache_request = 4;
  inline bool has_push_cache_request() const;
  inline void clear_push_cache_request();
  static const int kPushCacheRequestFieldNumber = 4;
  inline const ::meet_you::PushCacheRequest& push_cache_request() const;
  inline ::meet_you::PushCacheRequest* mutable_push_cache_request();
  inline ::meet_you::PushCacheRequest* release_push_cache_request();
  inline void set_allocated_push_cache_request(::meet_you::PushCacheRequest* push_cache_request);

  // optional .meet_you.PushCacheResponse push_cache_response = 5;
  inline bool has_push_cache_response() const;
  inline void clear_push_cache_response();
  static const int kPushCacheResponseFieldNumber = 5;
  inline const ::meet_you::PushCacheResponse& push_cache_response() const;
  inline ::meet_you::PushCacheResponse* mutable_push_cache_response();
  inline ::meet_you::PushCacheResponse* release_push_cache_response();
  inline void set_allocated_push_cache_response(::meet_you::PushCacheResponse* push_cache_response);

  // @@protoc_insertion_point(class_scope:meet_you.PushPacket)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_push_req();
  inline void clear_has_push_req();
  inline void set_has_push_resp();
  inline void clear_has_push_resp();
  inline void set_has_push_cache_request();
  inline void clear_has_push_cache_request();
  inline void set_has_push_cache_response();
  inline void clear_has_push_cache_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::meet_you::PushRequest* push_req_;
  ::meet_you::PushResponse* push_resp_;
  ::meet_you::PushCacheRequest* push_cache_request_;
  ::meet_you::PushCacheResponse* push_cache_response_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fserver_2eproto();

  void InitAsDefaultInstance();
  static PushPacket* default_instance_;
};
// -------------------------------------------------------------------

class PushCacheRequest : public ::google::protobuf::Message {
 public:
  PushCacheRequest();
  virtual ~PushCacheRequest();

  PushCacheRequest(const PushCacheRequest& from);

  inline PushCacheRequest& operator=(const PushCacheRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushCacheRequest& default_instance();

  void Swap(PushCacheRequest* other);

  // implements Message ----------------------------------------------

  PushCacheRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushCacheRequest& from);
  void MergeFrom(const PushCacheRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline const ::std::string& cid() const;
  inline void set_cid(const ::std::string& value);
  inline void set_cid(const char* value);
  inline void set_cid(const char* value, size_t size);
  inline ::std::string* mutable_cid();
  inline ::std::string* release_cid();
  inline void set_allocated_cid(::std::string* cid);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int64 start_msgid = 3;
  inline bool has_start_msgid() const;
  inline void clear_start_msgid();
  static const int kStartMsgidFieldNumber = 3;
  inline ::google::protobuf::int64 start_msgid() const;
  inline void set_start_msgid(::google::protobuf::int64 value);

  // optional int32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional int64 expiry = 5;
  inline bool has_expiry() const;
  inline void clear_expiry();
  static const int kExpiryFieldNumber = 5;
  inline ::google::protobuf::int64 expiry() const;
  inline void set_expiry(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:meet_you.PushCacheRequest)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start_msgid();
  inline void clear_has_start_msgid();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_expiry();
  inline void clear_has_expiry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cid_;
  ::std::string* type_;
  ::google::protobuf::int64 start_msgid_;
  ::google::protobuf::int64 expiry_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fserver_2eproto();

  void InitAsDefaultInstance();
  static PushCacheRequest* default_instance_;
};
// -------------------------------------------------------------------

class PushMessage : public ::google::protobuf::Message {
 public:
  PushMessage();
  virtual ~PushMessage();

  PushMessage(const PushMessage& from);

  inline PushMessage& operator=(const PushMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushMessage& default_instance();

  void Swap(PushMessage* other);

  // implements Message ----------------------------------------------

  PushMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushMessage& from);
  void MergeFrom(const PushMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 response_msgid = 1;
  inline bool has_response_msgid() const;
  inline void clear_response_msgid();
  static const int kResponseMsgidFieldNumber = 1;
  inline ::google::protobuf::int64 response_msgid() const;
  inline void set_response_msgid(::google::protobuf::int64 value);

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:meet_you.PushMessage)
 private:
  inline void set_has_response_msgid();
  inline void clear_has_response_msgid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 response_msgid_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fserver_2eproto();

  void InitAsDefaultInstance();
  static PushMessage* default_instance_;
};
// -------------------------------------------------------------------

class PushCacheResponse : public ::google::protobuf::Message {
 public:
  PushCacheResponse();
  virtual ~PushCacheResponse();

  PushCacheResponse(const PushCacheResponse& from);

  inline PushCacheResponse& operator=(const PushCacheResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushCacheResponse& default_instance();

  void Swap(PushCacheResponse* other);

  // implements Message ----------------------------------------------

  PushCacheResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushCacheResponse& from);
  void MergeFrom(const PushCacheResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline const ::std::string& cid() const;
  inline void set_cid(const ::std::string& value);
  inline void set_cid(const char* value);
  inline void set_cid(const char* value, size_t size);
  inline ::std::string* mutable_cid();
  inline ::std::string* release_cid();
  inline void set_allocated_cid(::std::string* cid);

  // repeated .meet_you.PushMessage msgs = 2;
  inline int msgs_size() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 2;
  inline const ::meet_you::PushMessage& msgs(int index) const;
  inline ::meet_you::PushMessage* mutable_msgs(int index);
  inline ::meet_you::PushMessage* add_msgs();
  inline const ::google::protobuf::RepeatedPtrField< ::meet_you::PushMessage >&
      msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::meet_you::PushMessage >*
      mutable_msgs();

  // optional int32 left_size = 3;
  inline bool has_left_size() const;
  inline void clear_left_size();
  static const int kLeftSizeFieldNumber = 3;
  inline ::google::protobuf::int32 left_size() const;
  inline void set_left_size(::google::protobuf::int32 value);

  // optional int64 last_msgid = 4;
  inline bool has_last_msgid() const;
  inline void clear_last_msgid();
  static const int kLastMsgidFieldNumber = 4;
  inline ::google::protobuf::int64 last_msgid() const;
  inline void set_last_msgid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:meet_you.PushCacheResponse)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_left_size();
  inline void clear_has_left_size();
  inline void set_has_last_msgid();
  inline void clear_has_last_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cid_;
  ::google::protobuf::RepeatedPtrField< ::meet_you::PushMessage > msgs_;
  ::google::protobuf::int64 last_msgid_;
  ::google::protobuf::int32 left_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_push_5fserver_2eproto();
  friend void protobuf_AssignDesc_push_5fserver_2eproto();
  friend void protobuf_ShutdownFile_push_5fserver_2eproto();

  void InitAsDefaultInstance();
  static PushCacheResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// PushRequest

// optional string cid = 1;
inline bool PushRequest::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushRequest::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushRequest::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushRequest::clear_cid() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    cid_->clear();
  }
  clear_has_cid();
}
inline const ::std::string& PushRequest::cid() const {
  return *cid_;
}
inline void PushRequest::set_cid(const ::std::string& value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
}
inline void PushRequest::set_cid(const char* value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
}
inline void PushRequest::set_cid(const char* value, size_t size) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushRequest::mutable_cid() {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  return cid_;
}
inline ::std::string* PushRequest::release_cid() {
  clear_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cid_;
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushRequest::set_allocated_cid(::std::string* cid) {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (cid) {
    set_has_cid();
    cid_ = cid;
  } else {
    clear_has_cid();
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string type = 2;
inline bool PushRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushRequest::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& PushRequest::type() const {
  return *type_;
}
inline void PushRequest::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PushRequest::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PushRequest::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushRequest::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* PushRequest::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushRequest::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 msgid = 3;
inline bool PushRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushRequest::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::int64 PushRequest::msgid() const {
  return msgid_;
}
inline void PushRequest::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional int64 expiry = 4;
inline bool PushRequest::has_expiry() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PushRequest::set_has_expiry() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PushRequest::clear_has_expiry() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PushRequest::clear_expiry() {
  expiry_ = GOOGLE_LONGLONG(0);
  clear_has_expiry();
}
inline ::google::protobuf::int64 PushRequest::expiry() const {
  return expiry_;
}
inline void PushRequest::set_expiry(::google::protobuf::int64 value) {
  set_has_expiry();
  expiry_ = value;
}

// optional bytes data = 5;
inline bool PushRequest::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PushRequest::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PushRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PushRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& PushRequest::data() const {
  return *data_;
}
inline void PushRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PushRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PushRequest::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* PushRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PushResponse

// optional string cid = 1;
inline bool PushResponse::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushResponse::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushResponse::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushResponse::clear_cid() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    cid_->clear();
  }
  clear_has_cid();
}
inline const ::std::string& PushResponse::cid() const {
  return *cid_;
}
inline void PushResponse::set_cid(const ::std::string& value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
}
inline void PushResponse::set_cid(const char* value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
}
inline void PushResponse::set_cid(const char* value, size_t size) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushResponse::mutable_cid() {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  return cid_;
}
inline ::std::string* PushResponse::release_cid() {
  clear_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cid_;
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushResponse::set_allocated_cid(::std::string* cid) {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (cid) {
    set_has_cid();
    cid_ = cid;
  } else {
    clear_has_cid();
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string type = 2;
inline bool PushResponse::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushResponse::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushResponse::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& PushResponse::type() const {
  return *type_;
}
inline void PushResponse::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PushResponse::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PushResponse::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushResponse::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* PushResponse::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushResponse::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 msgid = 3;
inline bool PushResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushResponse::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::int64 PushResponse::msgid() const {
  return msgid_;
}
inline void PushResponse::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// PushPacket

// required int32 type = 1;
inline bool PushPacket::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushPacket::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushPacket::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushPacket::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PushPacket::type() const {
  return type_;
}
inline void PushPacket::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .meet_you.PushRequest push_req = 2;
inline bool PushPacket::has_push_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushPacket::set_has_push_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushPacket::clear_has_push_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushPacket::clear_push_req() {
  if (push_req_ != NULL) push_req_->::meet_you::PushRequest::Clear();
  clear_has_push_req();
}
inline const ::meet_you::PushRequest& PushPacket::push_req() const {
  return push_req_ != NULL ? *push_req_ : *default_instance_->push_req_;
}
inline ::meet_you::PushRequest* PushPacket::mutable_push_req() {
  set_has_push_req();
  if (push_req_ == NULL) push_req_ = new ::meet_you::PushRequest;
  return push_req_;
}
inline ::meet_you::PushRequest* PushPacket::release_push_req() {
  clear_has_push_req();
  ::meet_you::PushRequest* temp = push_req_;
  push_req_ = NULL;
  return temp;
}
inline void PushPacket::set_allocated_push_req(::meet_you::PushRequest* push_req) {
  delete push_req_;
  push_req_ = push_req;
  if (push_req) {
    set_has_push_req();
  } else {
    clear_has_push_req();
  }
}

// optional .meet_you.PushResponse push_resp = 3;
inline bool PushPacket::has_push_resp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushPacket::set_has_push_resp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushPacket::clear_has_push_resp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushPacket::clear_push_resp() {
  if (push_resp_ != NULL) push_resp_->::meet_you::PushResponse::Clear();
  clear_has_push_resp();
}
inline const ::meet_you::PushResponse& PushPacket::push_resp() const {
  return push_resp_ != NULL ? *push_resp_ : *default_instance_->push_resp_;
}
inline ::meet_you::PushResponse* PushPacket::mutable_push_resp() {
  set_has_push_resp();
  if (push_resp_ == NULL) push_resp_ = new ::meet_you::PushResponse;
  return push_resp_;
}
inline ::meet_you::PushResponse* PushPacket::release_push_resp() {
  clear_has_push_resp();
  ::meet_you::PushResponse* temp = push_resp_;
  push_resp_ = NULL;
  return temp;
}
inline void PushPacket::set_allocated_push_resp(::meet_you::PushResponse* push_resp) {
  delete push_resp_;
  push_resp_ = push_resp;
  if (push_resp) {
    set_has_push_resp();
  } else {
    clear_has_push_resp();
  }
}

// optional .meet_you.PushCacheRequest push_cache_request = 4;
inline bool PushPacket::has_push_cache_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PushPacket::set_has_push_cache_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PushPacket::clear_has_push_cache_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PushPacket::clear_push_cache_request() {
  if (push_cache_request_ != NULL) push_cache_request_->::meet_you::PushCacheRequest::Clear();
  clear_has_push_cache_request();
}
inline const ::meet_you::PushCacheRequest& PushPacket::push_cache_request() const {
  return push_cache_request_ != NULL ? *push_cache_request_ : *default_instance_->push_cache_request_;
}
inline ::meet_you::PushCacheRequest* PushPacket::mutable_push_cache_request() {
  set_has_push_cache_request();
  if (push_cache_request_ == NULL) push_cache_request_ = new ::meet_you::PushCacheRequest;
  return push_cache_request_;
}
inline ::meet_you::PushCacheRequest* PushPacket::release_push_cache_request() {
  clear_has_push_cache_request();
  ::meet_you::PushCacheRequest* temp = push_cache_request_;
  push_cache_request_ = NULL;
  return temp;
}
inline void PushPacket::set_allocated_push_cache_request(::meet_you::PushCacheRequest* push_cache_request) {
  delete push_cache_request_;
  push_cache_request_ = push_cache_request;
  if (push_cache_request) {
    set_has_push_cache_request();
  } else {
    clear_has_push_cache_request();
  }
}

// optional .meet_you.PushCacheResponse push_cache_response = 5;
inline bool PushPacket::has_push_cache_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PushPacket::set_has_push_cache_response() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PushPacket::clear_has_push_cache_response() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PushPacket::clear_push_cache_response() {
  if (push_cache_response_ != NULL) push_cache_response_->::meet_you::PushCacheResponse::Clear();
  clear_has_push_cache_response();
}
inline const ::meet_you::PushCacheResponse& PushPacket::push_cache_response() const {
  return push_cache_response_ != NULL ? *push_cache_response_ : *default_instance_->push_cache_response_;
}
inline ::meet_you::PushCacheResponse* PushPacket::mutable_push_cache_response() {
  set_has_push_cache_response();
  if (push_cache_response_ == NULL) push_cache_response_ = new ::meet_you::PushCacheResponse;
  return push_cache_response_;
}
inline ::meet_you::PushCacheResponse* PushPacket::release_push_cache_response() {
  clear_has_push_cache_response();
  ::meet_you::PushCacheResponse* temp = push_cache_response_;
  push_cache_response_ = NULL;
  return temp;
}
inline void PushPacket::set_allocated_push_cache_response(::meet_you::PushCacheResponse* push_cache_response) {
  delete push_cache_response_;
  push_cache_response_ = push_cache_response;
  if (push_cache_response) {
    set_has_push_cache_response();
  } else {
    clear_has_push_cache_response();
  }
}

// -------------------------------------------------------------------

// PushCacheRequest

// required string cid = 1;
inline bool PushCacheRequest::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushCacheRequest::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushCacheRequest::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushCacheRequest::clear_cid() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    cid_->clear();
  }
  clear_has_cid();
}
inline const ::std::string& PushCacheRequest::cid() const {
  return *cid_;
}
inline void PushCacheRequest::set_cid(const ::std::string& value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
}
inline void PushCacheRequest::set_cid(const char* value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
}
inline void PushCacheRequest::set_cid(const char* value, size_t size) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushCacheRequest::mutable_cid() {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  return cid_;
}
inline ::std::string* PushCacheRequest::release_cid() {
  clear_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cid_;
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushCacheRequest::set_allocated_cid(::std::string* cid) {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (cid) {
    set_has_cid();
    cid_ = cid;
  } else {
    clear_has_cid();
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool PushCacheRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushCacheRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushCacheRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushCacheRequest::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& PushCacheRequest::type() const {
  return *type_;
}
inline void PushCacheRequest::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PushCacheRequest::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PushCacheRequest::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushCacheRequest::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* PushCacheRequest::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushCacheRequest::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 start_msgid = 3;
inline bool PushCacheRequest::has_start_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushCacheRequest::set_has_start_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushCacheRequest::clear_has_start_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushCacheRequest::clear_start_msgid() {
  start_msgid_ = GOOGLE_LONGLONG(0);
  clear_has_start_msgid();
}
inline ::google::protobuf::int64 PushCacheRequest::start_msgid() const {
  return start_msgid_;
}
inline void PushCacheRequest::set_start_msgid(::google::protobuf::int64 value) {
  set_has_start_msgid();
  start_msgid_ = value;
}

// optional int32 size = 4;
inline bool PushCacheRequest::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PushCacheRequest::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PushCacheRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PushCacheRequest::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 PushCacheRequest::size() const {
  return size_;
}
inline void PushCacheRequest::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional int64 expiry = 5;
inline bool PushCacheRequest::has_expiry() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PushCacheRequest::set_has_expiry() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PushCacheRequest::clear_has_expiry() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PushCacheRequest::clear_expiry() {
  expiry_ = GOOGLE_LONGLONG(0);
  clear_has_expiry();
}
inline ::google::protobuf::int64 PushCacheRequest::expiry() const {
  return expiry_;
}
inline void PushCacheRequest::set_expiry(::google::protobuf::int64 value) {
  set_has_expiry();
  expiry_ = value;
}

// -------------------------------------------------------------------

// PushMessage

// optional int64 response_msgid = 1;
inline bool PushMessage::has_response_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushMessage::set_has_response_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushMessage::clear_has_response_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushMessage::clear_response_msgid() {
  response_msgid_ = GOOGLE_LONGLONG(0);
  clear_has_response_msgid();
}
inline ::google::protobuf::int64 PushMessage::response_msgid() const {
  return response_msgid_;
}
inline void PushMessage::set_response_msgid(::google::protobuf::int64 value) {
  set_has_response_msgid();
  response_msgid_ = value;
}

// optional bytes data = 2;
inline bool PushMessage::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushMessage::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushMessage::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& PushMessage::data() const {
  return *data_;
}
inline void PushMessage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PushMessage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PushMessage::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushMessage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* PushMessage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushMessage::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PushCacheResponse

// required string cid = 1;
inline bool PushCacheResponse::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushCacheResponse::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushCacheResponse::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushCacheResponse::clear_cid() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    cid_->clear();
  }
  clear_has_cid();
}
inline const ::std::string& PushCacheResponse::cid() const {
  return *cid_;
}
inline void PushCacheResponse::set_cid(const ::std::string& value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
}
inline void PushCacheResponse::set_cid(const char* value) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(value);
}
inline void PushCacheResponse::set_cid(const char* value, size_t size) {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  cid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushCacheResponse::mutable_cid() {
  set_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    cid_ = new ::std::string;
  }
  return cid_;
}
inline ::std::string* PushCacheResponse::release_cid() {
  clear_has_cid();
  if (cid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cid_;
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PushCacheResponse::set_allocated_cid(::std::string* cid) {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (cid) {
    set_has_cid();
    cid_ = cid;
  } else {
    clear_has_cid();
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .meet_you.PushMessage msgs = 2;
inline int PushCacheResponse::msgs_size() const {
  return msgs_.size();
}
inline void PushCacheResponse::clear_msgs() {
  msgs_.Clear();
}
inline const ::meet_you::PushMessage& PushCacheResponse::msgs(int index) const {
  return msgs_.Get(index);
}
inline ::meet_you::PushMessage* PushCacheResponse::mutable_msgs(int index) {
  return msgs_.Mutable(index);
}
inline ::meet_you::PushMessage* PushCacheResponse::add_msgs() {
  return msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::meet_you::PushMessage >&
PushCacheResponse::msgs() const {
  return msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::meet_you::PushMessage >*
PushCacheResponse::mutable_msgs() {
  return &msgs_;
}

// optional int32 left_size = 3;
inline bool PushCacheResponse::has_left_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushCacheResponse::set_has_left_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushCacheResponse::clear_has_left_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushCacheResponse::clear_left_size() {
  left_size_ = 0;
  clear_has_left_size();
}
inline ::google::protobuf::int32 PushCacheResponse::left_size() const {
  return left_size_;
}
inline void PushCacheResponse::set_left_size(::google::protobuf::int32 value) {
  set_has_left_size();
  left_size_ = value;
}

// optional int64 last_msgid = 4;
inline bool PushCacheResponse::has_last_msgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PushCacheResponse::set_has_last_msgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PushCacheResponse::clear_has_last_msgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PushCacheResponse::clear_last_msgid() {
  last_msgid_ = GOOGLE_LONGLONG(0);
  clear_has_last_msgid();
}
inline ::google::protobuf::int64 PushCacheResponse::last_msgid() const {
  return last_msgid_;
}
inline void PushCacheResponse::set_last_msgid(::google::protobuf::int64 value) {
  set_has_last_msgid();
  last_msgid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meet_you

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_push_5fserver_2eproto__INCLUDED
