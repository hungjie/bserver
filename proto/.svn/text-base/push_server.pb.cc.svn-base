// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "push_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace meet_you {

namespace {

const ::google::protobuf::Descriptor* PushRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushCacheRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushCacheRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushCacheResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushCacheResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_push_5fserver_2eproto() {
  protobuf_AddDesc_push_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "push_server.proto");
  GOOGLE_CHECK(file != NULL);
  PushRequest_descriptor_ = file->message_type(0);
  static const int PushRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRequest, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRequest, expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRequest, data_),
  };
  PushRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushRequest_descriptor_,
      PushRequest::default_instance_,
      PushRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushRequest));
  PushResponse_descriptor_ = file->message_type(1);
  static const int PushResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushResponse, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushResponse, msgid_),
  };
  PushResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushResponse_descriptor_,
      PushResponse::default_instance_,
      PushResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushResponse));
  PushPacket_descriptor_ = file->message_type(2);
  static const int PushPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPacket, push_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPacket, push_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPacket, push_cache_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPacket, push_cache_response_),
  };
  PushPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushPacket_descriptor_,
      PushPacket::default_instance_,
      PushPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushPacket));
  PushCacheRequest_descriptor_ = file->message_type(3);
  static const int PushCacheRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheRequest, start_msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheRequest, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheRequest, expiry_),
  };
  PushCacheRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushCacheRequest_descriptor_,
      PushCacheRequest::default_instance_,
      PushCacheRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushCacheRequest));
  PushMessage_descriptor_ = file->message_type(4);
  static const int PushMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessage, response_msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessage, data_),
  };
  PushMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMessage_descriptor_,
      PushMessage::default_instance_,
      PushMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMessage));
  PushCacheResponse_descriptor_ = file->message_type(5);
  static const int PushCacheResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheResponse, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheResponse, msgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheResponse, left_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheResponse, last_msgid_),
  };
  PushCacheResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushCacheResponse_descriptor_,
      PushCacheResponse::default_instance_,
      PushCacheResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushCacheResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushCacheResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_push_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushRequest_descriptor_, &PushRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushResponse_descriptor_, &PushResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushPacket_descriptor_, &PushPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushCacheRequest_descriptor_, &PushCacheRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMessage_descriptor_, &PushMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushCacheResponse_descriptor_, &PushCacheResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_push_5fserver_2eproto() {
  delete PushRequest::default_instance_;
  delete PushRequest_reflection_;
  delete PushResponse::default_instance_;
  delete PushResponse_reflection_;
  delete PushPacket::default_instance_;
  delete PushPacket_reflection_;
  delete PushCacheRequest::default_instance_;
  delete PushCacheRequest_reflection_;
  delete PushMessage::default_instance_;
  delete PushMessage_reflection_;
  delete PushCacheResponse::default_instance_;
  delete PushCacheResponse_reflection_;
}

void protobuf_AddDesc_push_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021push_server.proto\022\010meet_you\"U\n\013PushReq"
    "uest\022\013\n\003cid\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\r\n\005msgid"
    "\030\003 \001(\003\022\016\n\006expiry\030\004 \001(\003\022\014\n\004data\030\005 \001(\014\"8\n\014"
    "PushResponse\022\013\n\003cid\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022"
    "\r\n\005msgid\030\003 \001(\003\"\340\001\n\nPushPacket\022\014\n\004type\030\001 "
    "\002(\005\022\'\n\010push_req\030\002 \001(\0132\025.meet_you.PushReq"
    "uest\022)\n\tpush_resp\030\003 \001(\0132\026.meet_you.PushR"
    "esponse\0226\n\022push_cache_request\030\004 \001(\0132\032.me"
    "et_you.PushCacheRequest\0228\n\023push_cache_re"
    "sponse\030\005 \001(\0132\033.meet_you.PushCacheRespons"
    "e\"`\n\020PushCacheRequest\022\013\n\003cid\030\001 \002(\t\022\014\n\004ty"
    "pe\030\002 \002(\t\022\023\n\013start_msgid\030\003 \001(\003\022\014\n\004size\030\004 "
    "\001(\005\022\016\n\006expiry\030\005 \001(\003\"3\n\013PushMessage\022\026\n\016re"
    "sponse_msgid\030\001 \001(\003\022\014\n\004data\030\002 \001(\014\"l\n\021Push"
    "CacheResponse\022\013\n\003cid\030\001 \002(\t\022#\n\004msgs\030\002 \003(\013"
    "2\025.meet_you.PushMessage\022\021\n\tleft_size\030\003 \001"
    "(\005\022\022\n\nlast_msgid\030\004 \001(\003", 662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "push_server.proto", &protobuf_RegisterTypes);
  PushRequest::default_instance_ = new PushRequest();
  PushResponse::default_instance_ = new PushResponse();
  PushPacket::default_instance_ = new PushPacket();
  PushCacheRequest::default_instance_ = new PushCacheRequest();
  PushMessage::default_instance_ = new PushMessage();
  PushCacheResponse::default_instance_ = new PushCacheResponse();
  PushRequest::default_instance_->InitAsDefaultInstance();
  PushResponse::default_instance_->InitAsDefaultInstance();
  PushPacket::default_instance_->InitAsDefaultInstance();
  PushCacheRequest::default_instance_->InitAsDefaultInstance();
  PushMessage::default_instance_->InitAsDefaultInstance();
  PushCacheResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_push_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_push_5fserver_2eproto {
  StaticDescriptorInitializer_push_5fserver_2eproto() {
    protobuf_AddDesc_push_5fserver_2eproto();
  }
} static_descriptor_initializer_push_5fserver_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PushRequest::kCidFieldNumber;
const int PushRequest::kTypeFieldNumber;
const int PushRequest::kMsgidFieldNumber;
const int PushRequest::kExpiryFieldNumber;
const int PushRequest::kDataFieldNumber;
#endif  // !_MSC_VER

PushRequest::PushRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushRequest::InitAsDefaultInstance() {
}

PushRequest::PushRequest(const PushRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushRequest::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msgid_ = GOOGLE_LONGLONG(0);
  expiry_ = GOOGLE_LONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRequest::~PushRequest() {
  SharedDtor();
}

void PushRequest::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PushRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushRequest_descriptor_;
}

const PushRequest& PushRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fserver_2eproto();
  return *default_instance_;
}

PushRequest* PushRequest::default_instance_ = NULL;

PushRequest* PushRequest::New() const {
  return new PushRequest;
}

void PushRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    msgid_ = GOOGLE_LONGLONG(0);
    expiry_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_msgid;
        break;
      }

      // optional int64 msgid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expiry;
        break;
      }

      // optional int64 expiry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_)));
          set_has_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional int64 msgid = 3;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->msgid(), output);
  }

  // optional int64 expiry = 4;
  if (has_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expiry(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int64 msgid = 3;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->msgid(), target);
  }

  // optional int64 expiry = 4;
  if (has_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expiry(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int64 msgid = 3;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msgid());
    }

    // optional int64 expiry = 4;
    if (has_expiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushRequest::MergeFrom(const PushRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_expiry()) {
      set_expiry(from.expiry());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushRequest::CopyFrom(const PushRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRequest::IsInitialized() const {

  return true;
}

void PushRequest::Swap(PushRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(msgid_, other->msgid_);
    std::swap(expiry_, other->expiry_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushRequest_descriptor_;
  metadata.reflection = PushRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushResponse::kCidFieldNumber;
const int PushResponse::kTypeFieldNumber;
const int PushResponse::kMsgidFieldNumber;
#endif  // !_MSC_VER

PushResponse::PushResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushResponse::InitAsDefaultInstance() {
}

PushResponse::PushResponse(const PushResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushResponse::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msgid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushResponse::~PushResponse() {
  SharedDtor();
}

void PushResponse::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void PushResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushResponse_descriptor_;
}

const PushResponse& PushResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fserver_2eproto();
  return *default_instance_;
}

PushResponse* PushResponse::default_instance_ = NULL;

PushResponse* PushResponse::New() const {
  return new PushResponse;
}

void PushResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    msgid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_msgid;
        break;
      }

      // optional int64 msgid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional int64 msgid = 3;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int64 msgid = 3;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int64 msgid = 3;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushResponse::MergeFrom(const PushResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushResponse::CopyFrom(const PushResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushResponse::IsInitialized() const {

  return true;
}

void PushResponse::Swap(PushResponse* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushResponse_descriptor_;
  metadata.reflection = PushResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushPacket::kTypeFieldNumber;
const int PushPacket::kPushReqFieldNumber;
const int PushPacket::kPushRespFieldNumber;
const int PushPacket::kPushCacheRequestFieldNumber;
const int PushPacket::kPushCacheResponseFieldNumber;
#endif  // !_MSC_VER

PushPacket::PushPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushPacket::InitAsDefaultInstance() {
  push_req_ = const_cast< ::meet_you::PushRequest*>(&::meet_you::PushRequest::default_instance());
  push_resp_ = const_cast< ::meet_you::PushResponse*>(&::meet_you::PushResponse::default_instance());
  push_cache_request_ = const_cast< ::meet_you::PushCacheRequest*>(&::meet_you::PushCacheRequest::default_instance());
  push_cache_response_ = const_cast< ::meet_you::PushCacheResponse*>(&::meet_you::PushCacheResponse::default_instance());
}

PushPacket::PushPacket(const PushPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushPacket::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  push_req_ = NULL;
  push_resp_ = NULL;
  push_cache_request_ = NULL;
  push_cache_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushPacket::~PushPacket() {
  SharedDtor();
}

void PushPacket::SharedDtor() {
  if (this != default_instance_) {
    delete push_req_;
    delete push_resp_;
    delete push_cache_request_;
    delete push_cache_response_;
  }
}

void PushPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushPacket_descriptor_;
}

const PushPacket& PushPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fserver_2eproto();
  return *default_instance_;
}

PushPacket* PushPacket::default_instance_ = NULL;

PushPacket* PushPacket::New() const {
  return new PushPacket;
}

void PushPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_push_req()) {
      if (push_req_ != NULL) push_req_->::meet_you::PushRequest::Clear();
    }
    if (has_push_resp()) {
      if (push_resp_ != NULL) push_resp_->::meet_you::PushResponse::Clear();
    }
    if (has_push_cache_request()) {
      if (push_cache_request_ != NULL) push_cache_request_->::meet_you::PushCacheRequest::Clear();
    }
    if (has_push_cache_response()) {
      if (push_cache_response_ != NULL) push_cache_response_->::meet_you::PushCacheResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_push_req;
        break;
      }

      // optional .meet_you.PushRequest push_req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_push_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_push_resp;
        break;
      }

      // optional .meet_you.PushResponse push_resp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_push_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_resp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_push_cache_request;
        break;
      }

      // optional .meet_you.PushCacheRequest push_cache_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_push_cache_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_cache_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_push_cache_response;
        break;
      }

      // optional .meet_you.PushCacheResponse push_cache_response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_push_cache_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_cache_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .meet_you.PushRequest push_req = 2;
  if (has_push_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->push_req(), output);
  }

  // optional .meet_you.PushResponse push_resp = 3;
  if (has_push_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->push_resp(), output);
  }

  // optional .meet_you.PushCacheRequest push_cache_request = 4;
  if (has_push_cache_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->push_cache_request(), output);
  }

  // optional .meet_you.PushCacheResponse push_cache_response = 5;
  if (has_push_cache_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->push_cache_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .meet_you.PushRequest push_req = 2;
  if (has_push_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->push_req(), target);
  }

  // optional .meet_you.PushResponse push_resp = 3;
  if (has_push_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->push_resp(), target);
  }

  // optional .meet_you.PushCacheRequest push_cache_request = 4;
  if (has_push_cache_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->push_cache_request(), target);
  }

  // optional .meet_you.PushCacheResponse push_cache_response = 5;
  if (has_push_cache_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->push_cache_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .meet_you.PushRequest push_req = 2;
    if (has_push_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_req());
    }

    // optional .meet_you.PushResponse push_resp = 3;
    if (has_push_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_resp());
    }

    // optional .meet_you.PushCacheRequest push_cache_request = 4;
    if (has_push_cache_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_cache_request());
    }

    // optional .meet_you.PushCacheResponse push_cache_response = 5;
    if (has_push_cache_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_cache_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushPacket::MergeFrom(const PushPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_push_req()) {
      mutable_push_req()->::meet_you::PushRequest::MergeFrom(from.push_req());
    }
    if (from.has_push_resp()) {
      mutable_push_resp()->::meet_you::PushResponse::MergeFrom(from.push_resp());
    }
    if (from.has_push_cache_request()) {
      mutable_push_cache_request()->::meet_you::PushCacheRequest::MergeFrom(from.push_cache_request());
    }
    if (from.has_push_cache_response()) {
      mutable_push_cache_response()->::meet_you::PushCacheResponse::MergeFrom(from.push_cache_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushPacket::CopyFrom(const PushPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_push_cache_request()) {
    if (!this->push_cache_request().IsInitialized()) return false;
  }
  if (has_push_cache_response()) {
    if (!this->push_cache_response().IsInitialized()) return false;
  }
  return true;
}

void PushPacket::Swap(PushPacket* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(push_req_, other->push_req_);
    std::swap(push_resp_, other->push_resp_);
    std::swap(push_cache_request_, other->push_cache_request_);
    std::swap(push_cache_response_, other->push_cache_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushPacket_descriptor_;
  metadata.reflection = PushPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushCacheRequest::kCidFieldNumber;
const int PushCacheRequest::kTypeFieldNumber;
const int PushCacheRequest::kStartMsgidFieldNumber;
const int PushCacheRequest::kSizeFieldNumber;
const int PushCacheRequest::kExpiryFieldNumber;
#endif  // !_MSC_VER

PushCacheRequest::PushCacheRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushCacheRequest::InitAsDefaultInstance() {
}

PushCacheRequest::PushCacheRequest(const PushCacheRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushCacheRequest::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_msgid_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  expiry_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushCacheRequest::~PushCacheRequest() {
  SharedDtor();
}

void PushCacheRequest::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void PushCacheRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushCacheRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushCacheRequest_descriptor_;
}

const PushCacheRequest& PushCacheRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fserver_2eproto();
  return *default_instance_;
}

PushCacheRequest* PushCacheRequest::default_instance_ = NULL;

PushCacheRequest* PushCacheRequest::New() const {
  return new PushCacheRequest;
}

void PushCacheRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    start_msgid_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    expiry_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushCacheRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_msgid;
        break;
      }

      // optional int64 start_msgid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_msgid_)));
          set_has_start_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expiry;
        break;
      }

      // optional int64 expiry = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_)));
          set_has_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushCacheRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional int64 start_msgid = 3;
  if (has_start_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_msgid(), output);
  }

  // optional int32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional int64 expiry = 5;
  if (has_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expiry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushCacheRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int64 start_msgid = 3;
  if (has_start_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_msgid(), target);
  }

  // optional int32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional int64 expiry = 5;
  if (has_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expiry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushCacheRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int64 start_msgid = 3;
    if (has_start_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_msgid());
    }

    // optional int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int64 expiry = 5;
    if (has_expiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushCacheRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushCacheRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushCacheRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushCacheRequest::MergeFrom(const PushCacheRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_msgid()) {
      set_start_msgid(from.start_msgid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_expiry()) {
      set_expiry(from.expiry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushCacheRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushCacheRequest::CopyFrom(const PushCacheRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushCacheRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PushCacheRequest::Swap(PushCacheRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(start_msgid_, other->start_msgid_);
    std::swap(size_, other->size_);
    std::swap(expiry_, other->expiry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushCacheRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushCacheRequest_descriptor_;
  metadata.reflection = PushCacheRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushMessage::kResponseMsgidFieldNumber;
const int PushMessage::kDataFieldNumber;
#endif  // !_MSC_VER

PushMessage::PushMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushMessage::InitAsDefaultInstance() {
}

PushMessage::PushMessage(const PushMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushMessage::SharedCtor() {
  _cached_size_ = 0;
  response_msgid_ = GOOGLE_LONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMessage::~PushMessage() {
  SharedDtor();
}

void PushMessage::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PushMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMessage_descriptor_;
}

const PushMessage& PushMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fserver_2eproto();
  return *default_instance_;
}

PushMessage* PushMessage::default_instance_ = NULL;

PushMessage* PushMessage::New() const {
  return new PushMessage;
}

void PushMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_msgid_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 response_msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &response_msgid_)));
          set_has_response_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 response_msgid = 1;
  if (has_response_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->response_msgid(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 response_msgid = 1;
  if (has_response_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->response_msgid(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 response_msgid = 1;
    if (has_response_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->response_msgid());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMessage::MergeFrom(const PushMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_msgid()) {
      set_response_msgid(from.response_msgid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMessage::CopyFrom(const PushMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMessage::IsInitialized() const {

  return true;
}

void PushMessage::Swap(PushMessage* other) {
  if (other != this) {
    std::swap(response_msgid_, other->response_msgid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMessage_descriptor_;
  metadata.reflection = PushMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushCacheResponse::kCidFieldNumber;
const int PushCacheResponse::kMsgsFieldNumber;
const int PushCacheResponse::kLeftSizeFieldNumber;
const int PushCacheResponse::kLastMsgidFieldNumber;
#endif  // !_MSC_VER

PushCacheResponse::PushCacheResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushCacheResponse::InitAsDefaultInstance() {
}

PushCacheResponse::PushCacheResponse(const PushCacheResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushCacheResponse::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  left_size_ = 0;
  last_msgid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushCacheResponse::~PushCacheResponse() {
  SharedDtor();
}

void PushCacheResponse::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (this != default_instance_) {
  }
}

void PushCacheResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushCacheResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushCacheResponse_descriptor_;
}

const PushCacheResponse& PushCacheResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_5fserver_2eproto();
  return *default_instance_;
}

PushCacheResponse* PushCacheResponse::default_instance_ = NULL;

PushCacheResponse* PushCacheResponse::New() const {
  return new PushCacheResponse;
}

void PushCacheResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    left_size_ = 0;
    last_msgid_ = GOOGLE_LONGLONG(0);
  }
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushCacheResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgs;
        break;
      }

      // repeated .meet_you.PushMessage msgs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgs;
        if (input->ExpectTag(24)) goto parse_left_size;
        break;
      }

      // optional int32 left_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_size_)));
          set_has_left_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_msgid;
        break;
      }

      // optional int64 last_msgid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_msgid_)));
          set_has_last_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushCacheResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // repeated .meet_you.PushMessage msgs = 2;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msgs(i), output);
  }

  // optional int32 left_size = 3;
  if (has_left_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_size(), output);
  }

  // optional int64 last_msgid = 4;
  if (has_last_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushCacheResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // repeated .meet_you.PushMessage msgs = 2;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msgs(i), target);
  }

  // optional int32 left_size = 3;
  if (has_left_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_size(), target);
  }

  // optional int64 last_msgid = 4;
  if (has_last_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushCacheResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional int32 left_size = 3;
    if (has_left_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_size());
    }

    // optional int64 last_msgid = 4;
    if (has_last_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_msgid());
    }

  }
  // repeated .meet_you.PushMessage msgs = 2;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushCacheResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushCacheResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushCacheResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushCacheResponse::MergeFrom(const PushCacheResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_left_size()) {
      set_left_size(from.left_size());
    }
    if (from.has_last_msgid()) {
      set_last_msgid(from.last_msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushCacheResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushCacheResponse::CopyFrom(const PushCacheResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushCacheResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PushCacheResponse::Swap(PushCacheResponse* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    msgs_.Swap(&other->msgs_);
    std::swap(left_size_, other->left_size_);
    std::swap(last_msgid_, other->last_msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushCacheResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushCacheResponse_descriptor_;
  metadata.reflection = PushCacheResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meet_you

// @@protoc_insertion_point(global_scope)
