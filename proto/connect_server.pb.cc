// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connect_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "connect_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace meet_you
{

namespace
{

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
ServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
ServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvRegRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
SvRegRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvRegResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
SvRegResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickCliRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
KickCliRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_connect_5fserver_2eproto()
{
    protobuf_AddDesc_connect_5fserver_2eproto();
    const ::google::protobuf::FileDescriptor* file =
        ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
            "connect_server.proto");
    GOOGLE_CHECK(file != NULL);
    LoginRequest_descriptor_ = file->message_type(0);
    static const int LoginRequest_offsets_[2] =
    {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, cid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, device_type_),
    };
    LoginRequest_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        LoginRequest_descriptor_,
        LoginRequest::default_instance_,
        LoginRequest_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(LoginRequest));
    LoginResponse_descriptor_ = file->message_type(1);
    static const int LoginResponse_offsets_[2] =
    {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, status_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, sessid_),
    };
    LoginResponse_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        LoginResponse_descriptor_,
        LoginResponse::default_instance_,
        LoginResponse_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(LoginResponse));
    ServiceRequest_descriptor_ = file->message_type(2);
    static const int ServiceRequest_offsets_[4] =
    {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, sessid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, service_type_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, sn_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, payload_),
    };
    ServiceRequest_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        ServiceRequest_descriptor_,
        ServiceRequest::default_instance_,
        ServiceRequest_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(ServiceRequest));
    ServiceResponse_descriptor_ = file->message_type(3);
    static const int ServiceResponse_offsets_[5] =
    {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, sessid_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, service_type_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, sn_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, status_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, payload_),
    };
    ServiceResponse_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        ServiceResponse_descriptor_,
        ServiceResponse::default_instance_,
        ServiceResponse_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(ServiceResponse));
    SvRegRequest_descriptor_ = file->message_type(4);
    static const int SvRegRequest_offsets_[1] =
    {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvRegRequest, service_type_),
    };
    SvRegRequest_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        SvRegRequest_descriptor_,
        SvRegRequest::default_instance_,
        SvRegRequest_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvRegRequest, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvRegRequest, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(SvRegRequest));
    SvRegResponse_descriptor_ = file->message_type(5);
    static const int SvRegResponse_offsets_[1] =
    {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvRegResponse, status_),
    };
    SvRegResponse_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        SvRegResponse_descriptor_,
        SvRegResponse::default_instance_,
        SvRegResponse_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvRegResponse, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvRegResponse, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(SvRegResponse));
    KickCliRequest_descriptor_ = file->message_type(6);
    static const int KickCliRequest_offsets_[1] =
    {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickCliRequest, reason_),
    };
    KickCliRequest_reflection_ =
        new ::google::protobuf::internal::GeneratedMessageReflection(
        KickCliRequest_descriptor_,
        KickCliRequest::default_instance_,
        KickCliRequest_offsets_,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickCliRequest, _has_bits_[0]),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickCliRequest, _unknown_fields_),
        -1,
        ::google::protobuf::DescriptorPool::generated_pool(),
        ::google::protobuf::MessageFactory::generated_factory(),
        sizeof(KickCliRequest));
}

namespace
{

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                       &protobuf_AssignDesc_connect_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&)
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        LoginRequest_descriptor_, &LoginRequest::default_instance());
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        LoginResponse_descriptor_, &LoginResponse::default_instance());
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ServiceRequest_descriptor_, &ServiceRequest::default_instance());
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ServiceResponse_descriptor_, &ServiceResponse::default_instance());
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SvRegRequest_descriptor_, &SvRegRequest::default_instance());
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SvRegResponse_descriptor_, &SvRegResponse::default_instance());
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        KickCliRequest_descriptor_, &KickCliRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_connect_5fserver_2eproto()
{
    delete LoginRequest::default_instance_;
    delete LoginRequest_reflection_;
    delete LoginResponse::default_instance_;
    delete LoginResponse_reflection_;
    delete ServiceRequest::default_instance_;
    delete ServiceRequest_reflection_;
    delete ServiceResponse::default_instance_;
    delete ServiceResponse_reflection_;
    delete SvRegRequest::default_instance_;
    delete SvRegRequest_reflection_;
    delete SvRegResponse::default_instance_;
    delete SvRegResponse_reflection_;
    delete KickCliRequest::default_instance_;
    delete KickCliRequest_reflection_;
}

void protobuf_AddDesc_connect_5fserver_2eproto()
{
    static bool already_here = false;
    if (already_here) return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
        "\n\024connect_server.proto\022\010meet_you\"0\n\014Logi"
        "nRequest\022\013\n\003cid\030\001 \002(\t\022\023\n\013device_type\030\002 \001"
        "(\005\"/\n\rLoginResponse\022\016\n\006status\030\001 \002(\005\022\016\n\006s"
        "essid\030\002 \001(\t\"S\n\016ServiceRequest\022\016\n\006sessid\030"
        "\001 \002(\t\022\024\n\014service_type\030\002 \002(\005\022\n\n\002sn\030\003 \002(\t\022"
        "\017\n\007payload\030\004 \001(\014\"d\n\017ServiceResponse\022\016\n\006s"
        "essid\030\001 \002(\t\022\024\n\014service_type\030\002 \002(\005\022\n\n\002sn\030"
        "\003 \002(\t\022\016\n\006status\030\004 \002(\005\022\017\n\007payload\030\005 \001(\014\"$"
        "\n\014SvRegRequest\022\024\n\014service_type\030\001 \002(\005\"\037\n\r"
        "SvRegResponse\022\016\n\006status\030\001 \002(\005\" \n\016KickCli"
        "Request\022\016\n\006reason\030\001 \001(\014", 423);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
        "connect_server.proto", &protobuf_RegisterTypes);
    LoginRequest::default_instance_ = new LoginRequest();
    LoginResponse::default_instance_ = new LoginResponse();
    ServiceRequest::default_instance_ = new ServiceRequest();
    ServiceResponse::default_instance_ = new ServiceResponse();
    SvRegRequest::default_instance_ = new SvRegRequest();
    SvRegResponse::default_instance_ = new SvRegResponse();
    KickCliRequest::default_instance_ = new KickCliRequest();
    LoginRequest::default_instance_->InitAsDefaultInstance();
    LoginResponse::default_instance_->InitAsDefaultInstance();
    ServiceRequest::default_instance_->InitAsDefaultInstance();
    ServiceResponse::default_instance_->InitAsDefaultInstance();
    SvRegRequest::default_instance_->InitAsDefaultInstance();
    SvRegResponse::default_instance_->InitAsDefaultInstance();
    KickCliRequest::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_connect_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_connect_5fserver_2eproto
{
    StaticDescriptorInitializer_connect_5fserver_2eproto()
    {
        protobuf_AddDesc_connect_5fserver_2eproto();
    }
} static_descriptor_initializer_connect_5fserver_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kCidFieldNumber;
const int LoginRequest::kDeviceTypeFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
    : ::google::protobuf::Message()
{
    SharedCtor();
}

void LoginRequest::InitAsDefaultInstance()
{
}

LoginRequest::LoginRequest(const LoginRequest& from)
    : ::google::protobuf::Message()
{
    SharedCtor();
    MergeFrom(from);
}

void LoginRequest::SharedCtor()
{
    _cached_size_ = 0;
    cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    device_type_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest()
{
    SharedDtor();
}

void LoginRequest::SharedDtor()
{
    if (cid_ != &::google::protobuf::internal::kEmptyString)
    {
        delete cid_;
    }
    if (this != default_instance_)
    {
    }
}

void LoginRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor()
{
    protobuf_AssignDescriptorsOnce();
    return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance()
{
    if (default_instance_ == NULL) protobuf_AddDesc_connect_5fserver_2eproto();
    return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const
{
    return new LoginRequest;
}

void LoginRequest::Clear()
{
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (has_cid())
        {
            if (cid_ != &::google::protobuf::internal::kEmptyString)
            {
                cid_->clear();
            }
        }
        device_type_ = 0;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0)
    {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // required string cid = 1;
        case 1:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_cid()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->cid().data(), this->cid().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(16)) goto parse_device_type;
            break;
        }

        // optional int32 device_type = 2;
        case 2:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
            {
parse_device_type:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &device_type_)));
                set_has_device_type();
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) return true;
            break;
        }

        default:
        {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
            {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // required string cid = 1;
    if (has_cid())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->cid(), output);
    }

    // optional int32 device_type = 2;
    if (has_device_type())
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->device_type(), output);
    }

    if (!unknown_fields().empty())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
    // required string cid = 1;
    if (has_cid())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                1, this->cid(), target);
    }

    // optional int32 device_type = 2;
    if (has_device_type())
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->device_type(), target);
    }

    if (!unknown_fields().empty())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int LoginRequest::ByteSize() const
{
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        // required string cid = 1;
        if (has_cid())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->cid());
        }

        // optional int32 device_type = 2;
        if (has_device_type())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              this->device_type());
        }

    }
    if (!unknown_fields().empty())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from)
{
    GOOGLE_CHECK_NE(&from, this);
    const LoginRequest* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
            &from);
    if (source == NULL)
    {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        MergeFrom(*source);
    }
}

void LoginRequest::MergeFrom(const LoginRequest& from)
{
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (from.has_cid())
        {
            set_cid(from.cid());
        }
        if (from.has_device_type())
        {
            set_device_type(from.device_type());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool LoginRequest::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
}

void LoginRequest::Swap(LoginRequest* other)
{
    if (other != this)
    {
        std::swap(cid_, other->cid_);
        std::swap(device_type_, other->device_type_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = LoginRequest_descriptor_;
    metadata.reflection = LoginRequest_reflection_;
    return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kStatusFieldNumber;
const int LoginResponse::kSessidFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
    : ::google::protobuf::Message()
{
    SharedCtor();
}

void LoginResponse::InitAsDefaultInstance()
{
}

LoginResponse::LoginResponse(const LoginResponse& from)
    : ::google::protobuf::Message()
{
    SharedCtor();
    MergeFrom(from);
}

void LoginResponse::SharedCtor()
{
    _cached_size_ = 0;
    status_ = 0;
    sessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse()
{
    SharedDtor();
}

void LoginResponse::SharedDtor()
{
    if (sessid_ != &::google::protobuf::internal::kEmptyString)
    {
        delete sessid_;
    }
    if (this != default_instance_)
    {
    }
}

void LoginResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor()
{
    protobuf_AssignDescriptorsOnce();
    return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance()
{
    if (default_instance_ == NULL) protobuf_AddDesc_connect_5fserver_2eproto();
    return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const
{
    return new LoginResponse;
}

void LoginResponse::Clear()
{
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        status_ = 0;
        if (has_sessid())
        {
            if (sessid_ != &::google::protobuf::internal::kEmptyString)
            {
                sessid_->clear();
            }
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0)
    {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // required int32 status = 1;
        case 1:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &status_)));
                set_has_status();
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(18)) goto parse_sessid;
            break;
        }

        // optional string sessid = 2;
        case 2:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
            {
parse_sessid:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_sessid()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->sessid().data(), this->sessid().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) return true;
            break;
        }

        default:
        {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
            {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // required int32 status = 1;
    if (has_status())
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
    }

    // optional string sessid = 2;
    if (has_sessid())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessid().data(), this->sessid().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            2, this->sessid(), output);
    }

    if (!unknown_fields().empty())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
    // required int32 status = 1;
    if (has_status())
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
    }

    // optional string sessid = 2;
    if (has_sessid())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessid().data(), this->sessid().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                2, this->sessid(), target);
    }

    if (!unknown_fields().empty())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int LoginResponse::ByteSize() const
{
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        // required int32 status = 1;
        if (has_status())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              this->status());
        }

        // optional string sessid = 2;
        if (has_sessid())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->sessid());
        }

    }
    if (!unknown_fields().empty())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from)
{
    GOOGLE_CHECK_NE(&from, this);
    const LoginResponse* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
            &from);
    if (source == NULL)
    {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        MergeFrom(*source);
    }
}

void LoginResponse::MergeFrom(const LoginResponse& from)
{
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (from.has_status())
        {
            set_status(from.status());
        }
        if (from.has_sessid())
        {
            set_sessid(from.sessid());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool LoginResponse::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
}

void LoginResponse::Swap(LoginResponse* other)
{
    if (other != this)
    {
        std::swap(status_, other->status_);
        std::swap(sessid_, other->sessid_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = LoginResponse_descriptor_;
    metadata.reflection = LoginResponse_reflection_;
    return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceRequest::kSessidFieldNumber;
const int ServiceRequest::kServiceTypeFieldNumber;
const int ServiceRequest::kSnFieldNumber;
const int ServiceRequest::kPayloadFieldNumber;
#endif  // !_MSC_VER

ServiceRequest::ServiceRequest()
    : ::google::protobuf::Message()
{
    SharedCtor();
}

void ServiceRequest::InitAsDefaultInstance()
{
}

ServiceRequest::ServiceRequest(const ServiceRequest& from)
    : ::google::protobuf::Message()
{
    SharedCtor();
    MergeFrom(from);
}

void ServiceRequest::SharedCtor()
{
    _cached_size_ = 0;
    sessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    service_type_ = 0;
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceRequest::~ServiceRequest()
{
    SharedDtor();
}

void ServiceRequest::SharedDtor()
{
    if (sessid_ != &::google::protobuf::internal::kEmptyString)
    {
        delete sessid_;
    }
    if (sn_ != &::google::protobuf::internal::kEmptyString)
    {
        delete sn_;
    }
    if (payload_ != &::google::protobuf::internal::kEmptyString)
    {
        delete payload_;
    }
    if (this != default_instance_)
    {
    }
}

void ServiceRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRequest::descriptor()
{
    protobuf_AssignDescriptorsOnce();
    return ServiceRequest_descriptor_;
}

const ServiceRequest& ServiceRequest::default_instance()
{
    if (default_instance_ == NULL) protobuf_AddDesc_connect_5fserver_2eproto();
    return *default_instance_;
}

ServiceRequest* ServiceRequest::default_instance_ = NULL;

ServiceRequest* ServiceRequest::New() const
{
    return new ServiceRequest;
}

void ServiceRequest::Clear()
{
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (has_sessid())
        {
            if (sessid_ != &::google::protobuf::internal::kEmptyString)
            {
                sessid_->clear();
            }
        }
        service_type_ = 0;
        if (has_sn())
        {
            if (sn_ != &::google::protobuf::internal::kEmptyString)
            {
                sn_->clear();
            }
        }
        if (has_payload())
        {
            if (payload_ != &::google::protobuf::internal::kEmptyString)
            {
                payload_->clear();
            }
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool ServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0)
    {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // required string sessid = 1;
        case 1:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_sessid()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->sessid().data(), this->sessid().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(16)) goto parse_service_type;
            break;
        }

        // required int32 service_type = 2;
        case 2:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
            {
parse_service_type:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &service_type_)));
                set_has_service_type();
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(26)) goto parse_sn;
            break;
        }

        // required string sn = 3;
        case 3:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
            {
parse_sn:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_sn()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->sn().data(), this->sn().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(34)) goto parse_payload;
            break;
        }

        // optional bytes payload = 4;
        case 4:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
            {
parse_payload:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->mutable_payload()));
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) return true;
            break;
        }

        default:
        {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
            {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void ServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // required string sessid = 1;
    if (has_sessid())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessid().data(), this->sessid().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->sessid(), output);
    }

    // required int32 service_type = 2;
    if (has_service_type())
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->service_type(), output);
    }

    // required string sn = 3;
    if (has_sn())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            3, this->sn(), output);
    }

    // optional bytes payload = 4;
    if (has_payload())
    {
        ::google::protobuf::internal::WireFormatLite::WriteBytes(
            4, this->payload(), output);
    }

    if (!unknown_fields().empty())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* ServiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
    // required string sessid = 1;
    if (has_sessid())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessid().data(), this->sessid().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                1, this->sessid(), target);
    }

    // required int32 service_type = 2;
    if (has_service_type())
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->service_type(), target);
    }

    // required string sn = 3;
    if (has_sn())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                3, this->sn(), target);
    }

    // optional bytes payload = 4;
    if (has_payload())
    {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
                4, this->payload(), target);
    }

    if (!unknown_fields().empty())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int ServiceRequest::ByteSize() const
{
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        // required string sessid = 1;
        if (has_sessid())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->sessid());
        }

        // required int32 service_type = 2;
        if (has_service_type())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              this->service_type());
        }

        // required string sn = 3;
        if (has_sn())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->sn());
        }

        // optional bytes payload = 4;
        if (has_payload())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                              this->payload());
        }

    }
    if (!unknown_fields().empty())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ServiceRequest::MergeFrom(const ::google::protobuf::Message& from)
{
    GOOGLE_CHECK_NE(&from, this);
    const ServiceRequest* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const ServiceRequest*>(
            &from);
    if (source == NULL)
    {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        MergeFrom(*source);
    }
}

void ServiceRequest::MergeFrom(const ServiceRequest& from)
{
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (from.has_sessid())
        {
            set_sessid(from.sessid());
        }
        if (from.has_service_type())
        {
            set_service_type(from.service_type());
        }
        if (from.has_sn())
        {
            set_sn(from.sn());
        }
        if (from.has_payload())
        {
            set_payload(from.payload());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceRequest::CopyFrom(const ::google::protobuf::Message& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void ServiceRequest::CopyFrom(const ServiceRequest& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ServiceRequest::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

    return true;
}

void ServiceRequest::Swap(ServiceRequest* other)
{
    if (other != this)
    {
        std::swap(sessid_, other->sessid_);
        std::swap(service_type_, other->service_type_);
        std::swap(sn_, other->sn_);
        std::swap(payload_, other->payload_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata ServiceRequest::GetMetadata() const
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ServiceRequest_descriptor_;
    metadata.reflection = ServiceRequest_reflection_;
    return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceResponse::kSessidFieldNumber;
const int ServiceResponse::kServiceTypeFieldNumber;
const int ServiceResponse::kSnFieldNumber;
const int ServiceResponse::kStatusFieldNumber;
const int ServiceResponse::kPayloadFieldNumber;
#endif  // !_MSC_VER

ServiceResponse::ServiceResponse()
    : ::google::protobuf::Message()
{
    SharedCtor();
}

void ServiceResponse::InitAsDefaultInstance()
{
}

ServiceResponse::ServiceResponse(const ServiceResponse& from)
    : ::google::protobuf::Message()
{
    SharedCtor();
    MergeFrom(from);
}

void ServiceResponse::SharedCtor()
{
    _cached_size_ = 0;
    sessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    service_type_ = 0;
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    status_ = 0;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResponse::~ServiceResponse()
{
    SharedDtor();
}

void ServiceResponse::SharedDtor()
{
    if (sessid_ != &::google::protobuf::internal::kEmptyString)
    {
        delete sessid_;
    }
    if (sn_ != &::google::protobuf::internal::kEmptyString)
    {
        delete sn_;
    }
    if (payload_ != &::google::protobuf::internal::kEmptyString)
    {
        delete payload_;
    }
    if (this != default_instance_)
    {
    }
}

void ServiceResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse::descriptor()
{
    protobuf_AssignDescriptorsOnce();
    return ServiceResponse_descriptor_;
}

const ServiceResponse& ServiceResponse::default_instance()
{
    if (default_instance_ == NULL) protobuf_AddDesc_connect_5fserver_2eproto();
    return *default_instance_;
}

ServiceResponse* ServiceResponse::default_instance_ = NULL;

ServiceResponse* ServiceResponse::New() const
{
    return new ServiceResponse;
}

void ServiceResponse::Clear()
{
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (has_sessid())
        {
            if (sessid_ != &::google::protobuf::internal::kEmptyString)
            {
                sessid_->clear();
            }
        }
        service_type_ = 0;
        if (has_sn())
        {
            if (sn_ != &::google::protobuf::internal::kEmptyString)
            {
                sn_->clear();
            }
        }
        status_ = 0;
        if (has_payload())
        {
            if (payload_ != &::google::protobuf::internal::kEmptyString)
            {
                payload_->clear();
            }
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool ServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0)
    {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // required string sessid = 1;
        case 1:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_sessid()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->sessid().data(), this->sessid().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(16)) goto parse_service_type;
            break;
        }

        // required int32 service_type = 2;
        case 2:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
            {
parse_service_type:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &service_type_)));
                set_has_service_type();
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(26)) goto parse_sn;
            break;
        }

        // required string sn = 3;
        case 3:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
            {
parse_sn:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_sn()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                    this->sn().data(), this->sn().length(),
                    ::google::protobuf::internal::WireFormat::PARSE);
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(32)) goto parse_status;
            break;
        }

        // required int32 status = 4;
        case 4:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
            {
parse_status:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &status_)));
                set_has_status();
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectTag(42)) goto parse_payload;
            break;
        }

        // optional bytes payload = 5;
        case 5:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
            {
parse_payload:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->mutable_payload()));
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) return true;
            break;
        }

        default:
        {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
            {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void ServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // required string sessid = 1;
    if (has_sessid())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessid().data(), this->sessid().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->sessid(), output);
    }

    // required int32 service_type = 2;
    if (has_service_type())
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->service_type(), output);
    }

    // required string sn = 3;
    if (has_sn())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        ::google::protobuf::internal::WireFormatLite::WriteString(
            3, this->sn(), output);
    }

    // required int32 status = 4;
    if (has_status())
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
    }

    // optional bytes payload = 5;
    if (has_payload())
    {
        ::google::protobuf::internal::WireFormatLite::WriteBytes(
            5, this->payload(), output);
    }

    if (!unknown_fields().empty())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* ServiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
    // required string sessid = 1;
    if (has_sessid())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessid().data(), this->sessid().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                1, this->sessid(), target);
    }

    // required int32 service_type = 2;
    if (has_service_type())
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->service_type(), target);
    }

    // required string sn = 3;
    if (has_sn())
    {
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::SERIALIZE);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                3, this->sn(), target);
    }

    // required int32 status = 4;
    if (has_status())
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
    }

    // optional bytes payload = 5;
    if (has_payload())
    {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
                5, this->payload(), target);
    }

    if (!unknown_fields().empty())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int ServiceResponse::ByteSize() const
{
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        // required string sessid = 1;
        if (has_sessid())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->sessid());
        }

        // required int32 service_type = 2;
        if (has_service_type())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              this->service_type());
        }

        // required string sn = 3;
        if (has_sn())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                              this->sn());
        }

        // required int32 status = 4;
        if (has_status())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              this->status());
        }

        // optional bytes payload = 5;
        if (has_payload())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                              this->payload());
        }

    }
    if (!unknown_fields().empty())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ServiceResponse::MergeFrom(const ::google::protobuf::Message& from)
{
    GOOGLE_CHECK_NE(&from, this);
    const ServiceResponse* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResponse*>(
            &from);
    if (source == NULL)
    {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        MergeFrom(*source);
    }
}

void ServiceResponse::MergeFrom(const ServiceResponse& from)
{
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (from.has_sessid())
        {
            set_sessid(from.sessid());
        }
        if (from.has_service_type())
        {
            set_service_type(from.service_type());
        }
        if (from.has_sn())
        {
            set_sn(from.sn());
        }
        if (from.has_status())
        {
            set_status(from.status());
        }
        if (from.has_payload())
        {
            set_payload(from.payload());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResponse::CopyFrom(const ::google::protobuf::Message& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void ServiceResponse::CopyFrom(const ServiceResponse& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ServiceResponse::IsInitialized() const
{
    if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

    return true;
}

void ServiceResponse::Swap(ServiceResponse* other)
{
    if (other != this)
    {
        std::swap(sessid_, other->sessid_);
        std::swap(service_type_, other->service_type_);
        std::swap(sn_, other->sn_);
        std::swap(status_, other->status_);
        std::swap(payload_, other->payload_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata ServiceResponse::GetMetadata() const
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ServiceResponse_descriptor_;
    metadata.reflection = ServiceResponse_reflection_;
    return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvRegRequest::kServiceTypeFieldNumber;
#endif  // !_MSC_VER

SvRegRequest::SvRegRequest()
    : ::google::protobuf::Message()
{
    SharedCtor();
}

void SvRegRequest::InitAsDefaultInstance()
{
}

SvRegRequest::SvRegRequest(const SvRegRequest& from)
    : ::google::protobuf::Message()
{
    SharedCtor();
    MergeFrom(from);
}

void SvRegRequest::SharedCtor()
{
    _cached_size_ = 0;
    service_type_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvRegRequest::~SvRegRequest()
{
    SharedDtor();
}

void SvRegRequest::SharedDtor()
{
    if (this != default_instance_)
    {
    }
}

void SvRegRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvRegRequest::descriptor()
{
    protobuf_AssignDescriptorsOnce();
    return SvRegRequest_descriptor_;
}

const SvRegRequest& SvRegRequest::default_instance()
{
    if (default_instance_ == NULL) protobuf_AddDesc_connect_5fserver_2eproto();
    return *default_instance_;
}

SvRegRequest* SvRegRequest::default_instance_ = NULL;

SvRegRequest* SvRegRequest::New() const
{
    return new SvRegRequest;
}

void SvRegRequest::Clear()
{
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        service_type_ = 0;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool SvRegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0)
    {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // required int32 service_type = 1;
        case 1:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &service_type_)));
                set_has_service_type();
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) return true;
            break;
        }

        default:
        {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
            {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void SvRegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // required int32 service_type = 1;
    if (has_service_type())
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->service_type(), output);
    }

    if (!unknown_fields().empty())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* SvRegRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
    // required int32 service_type = 1;
    if (has_service_type())
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->service_type(), target);
    }

    if (!unknown_fields().empty())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int SvRegRequest::ByteSize() const
{
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        // required int32 service_type = 1;
        if (has_service_type())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              this->service_type());
        }

    }
    if (!unknown_fields().empty())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SvRegRequest::MergeFrom(const ::google::protobuf::Message& from)
{
    GOOGLE_CHECK_NE(&from, this);
    const SvRegRequest* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const SvRegRequest*>(
            &from);
    if (source == NULL)
    {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        MergeFrom(*source);
    }
}

void SvRegRequest::MergeFrom(const SvRegRequest& from)
{
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (from.has_service_type())
        {
            set_service_type(from.service_type());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvRegRequest::CopyFrom(const ::google::protobuf::Message& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void SvRegRequest::CopyFrom(const SvRegRequest& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool SvRegRequest::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
}

void SvRegRequest::Swap(SvRegRequest* other)
{
    if (other != this)
    {
        std::swap(service_type_, other->service_type_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata SvRegRequest::GetMetadata() const
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = SvRegRequest_descriptor_;
    metadata.reflection = SvRegRequest_reflection_;
    return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvRegResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

SvRegResponse::SvRegResponse()
    : ::google::protobuf::Message()
{
    SharedCtor();
}

void SvRegResponse::InitAsDefaultInstance()
{
}

SvRegResponse::SvRegResponse(const SvRegResponse& from)
    : ::google::protobuf::Message()
{
    SharedCtor();
    MergeFrom(from);
}

void SvRegResponse::SharedCtor()
{
    _cached_size_ = 0;
    status_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvRegResponse::~SvRegResponse()
{
    SharedDtor();
}

void SvRegResponse::SharedDtor()
{
    if (this != default_instance_)
    {
    }
}

void SvRegResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvRegResponse::descriptor()
{
    protobuf_AssignDescriptorsOnce();
    return SvRegResponse_descriptor_;
}

const SvRegResponse& SvRegResponse::default_instance()
{
    if (default_instance_ == NULL) protobuf_AddDesc_connect_5fserver_2eproto();
    return *default_instance_;
}

SvRegResponse* SvRegResponse::default_instance_ = NULL;

SvRegResponse* SvRegResponse::New() const
{
    return new SvRegResponse;
}

void SvRegResponse::Clear()
{
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        status_ = 0;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool SvRegResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0)
    {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // required int32 status = 1;
        case 1:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT)
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                         input, &status_)));
                set_has_status();
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) return true;
            break;
        }

        default:
        {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
            {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void SvRegResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // required int32 status = 1;
    if (has_status())
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
    }

    if (!unknown_fields().empty())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* SvRegResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
    // required int32 status = 1;
    if (has_status())
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
    }

    if (!unknown_fields().empty())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int SvRegResponse::ByteSize() const
{
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        // required int32 status = 1;
        if (has_status())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                              this->status());
        }

    }
    if (!unknown_fields().empty())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SvRegResponse::MergeFrom(const ::google::protobuf::Message& from)
{
    GOOGLE_CHECK_NE(&from, this);
    const SvRegResponse* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const SvRegResponse*>(
            &from);
    if (source == NULL)
    {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        MergeFrom(*source);
    }
}

void SvRegResponse::MergeFrom(const SvRegResponse& from)
{
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (from.has_status())
        {
            set_status(from.status());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvRegResponse::CopyFrom(const ::google::protobuf::Message& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void SvRegResponse::CopyFrom(const SvRegResponse& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool SvRegResponse::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
}

void SvRegResponse::Swap(SvRegResponse* other)
{
    if (other != this)
    {
        std::swap(status_, other->status_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata SvRegResponse::GetMetadata() const
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = SvRegResponse_descriptor_;
    metadata.reflection = SvRegResponse_reflection_;
    return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickCliRequest::kReasonFieldNumber;
#endif  // !_MSC_VER

KickCliRequest::KickCliRequest()
    : ::google::protobuf::Message()
{
    SharedCtor();
}

void KickCliRequest::InitAsDefaultInstance()
{
}

KickCliRequest::KickCliRequest(const KickCliRequest& from)
    : ::google::protobuf::Message()
{
    SharedCtor();
    MergeFrom(from);
}

void KickCliRequest::SharedCtor()
{
    _cached_size_ = 0;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickCliRequest::~KickCliRequest()
{
    SharedDtor();
}

void KickCliRequest::SharedDtor()
{
    if (reason_ != &::google::protobuf::internal::kEmptyString)
    {
        delete reason_;
    }
    if (this != default_instance_)
    {
    }
}

void KickCliRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickCliRequest::descriptor()
{
    protobuf_AssignDescriptorsOnce();
    return KickCliRequest_descriptor_;
}

const KickCliRequest& KickCliRequest::default_instance()
{
    if (default_instance_ == NULL) protobuf_AddDesc_connect_5fserver_2eproto();
    return *default_instance_;
}

KickCliRequest* KickCliRequest::default_instance_ = NULL;

KickCliRequest* KickCliRequest::New() const
{
    return new KickCliRequest;
}

void KickCliRequest::Clear()
{
    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (has_reason())
        {
            if (reason_ != &::google::protobuf::internal::kEmptyString)
            {
                reason_->clear();
            }
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool KickCliRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
    ::google::protobuf::uint32 tag;
    while ((tag = input->ReadTag()) != 0)
    {
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // optional bytes reason = 1;
        case 1:
        {
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->mutable_reason()));
            }
            else
            {
                goto handle_uninterpreted;
            }
            if (input->ExpectAtEnd()) return true;
            break;
        }

        default:
        {
handle_uninterpreted:
            if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
            {
                return true;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, mutable_unknown_fields()));
            break;
        }
        }
    }
    return true;
#undef DO_
}

void KickCliRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // optional bytes reason = 1;
    if (has_reason())
    {
        ::google::protobuf::internal::WireFormatLite::WriteBytes(
            1, this->reason(), output);
    }

    if (!unknown_fields().empty())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            unknown_fields(), output);
    }
}

::google::protobuf::uint8* KickCliRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
    // optional bytes reason = 1;
    if (has_reason())
    {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
                1, this->reason(), target);
    }

    if (!unknown_fields().empty())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                     unknown_fields(), target);
    }
    return target;
}

int KickCliRequest::ByteSize() const
{
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        // optional bytes reason = 1;
        if (has_reason())
        {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                              this->reason());
        }

    }
    if (!unknown_fields().empty())
    {
        total_size +=
            ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void KickCliRequest::MergeFrom(const ::google::protobuf::Message& from)
{
    GOOGLE_CHECK_NE(&from, this);
    const KickCliRequest* source =
        ::google::protobuf::internal::dynamic_cast_if_available<const KickCliRequest*>(
            &from);
    if (source == NULL)
    {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        MergeFrom(*source);
    }
}

void KickCliRequest::MergeFrom(const KickCliRequest& from)
{
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
    {
        if (from.has_reason())
        {
            set_reason(from.reason());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickCliRequest::CopyFrom(const ::google::protobuf::Message& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void KickCliRequest::CopyFrom(const KickCliRequest& from)
{
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool KickCliRequest::IsInitialized() const
{

    return true;
}

void KickCliRequest::Swap(KickCliRequest* other)
{
    if (other != this)
    {
        std::swap(reason_, other->reason_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata KickCliRequest::GetMetadata() const
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = KickCliRequest_descriptor_;
    metadata.reflection = KickCliRequest_reflection_;
    return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meet_you

// @@protoc_insertion_point(global_scope)
